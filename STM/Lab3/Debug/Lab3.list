
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080034d8  080034d8  000134d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034fc  080034fc  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080034fc  080034fc  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034fc  080034fc  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034fc  080034fc  000134fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003500  08003500  00013500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000003c  08003540  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003540  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b3d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dad  00000000  00000000  00028be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002a998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000081f  00000000  00000000  0002b460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017061  00000000  00000000  0002bc7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e6e5  00000000  00000000  00042ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082971  00000000  00000000  000513c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a7c  00000000  00000000  000d3d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d67b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	080034c0 	.word	0x080034c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	080034c0 	.word	0x080034c0

0800014c <is_button_Pressed>:

int TimeOutForKeyPress[NUM_OF_BUTTONS] =  {0,0,0};

int time_count_up[NUM_OF_BUTTONS] = {TIME_HOLD, TIME_HOLD, TIME_HOLD} ;

int is_button_Pressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(nor_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <is_button_Pressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <is_button_Pressed+0x22>
			nor_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <is_button_Pressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <is_button_Pressed+0x24>
		}
		return 0 ;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000058 	.word	0x20000058

08000180 <subKeyProcess>:
			return 1;
		}
	return 0 ;
}

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	 nor_flag[index] = 1 ;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000058 	.word	0x20000058

080001a0 <subKeyLongPress>:

void subKeyLongPress(int index){
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	long_flag[index] = 1 ;
 80001a8:	4a04      	ldr	r2, [pc, #16]	; (80001bc <subKeyLongPress+0x1c>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2101      	movs	r1, #1
 80001ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001b2:	bf00      	nop
 80001b4:	370c      	adds	r7, #12
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	20000064 	.word	0x20000064

080001c0 <getKeyInput>:
void getKeyInput(){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < NUM_OF_BUTTONS ; i++){
 80001c6:	2300      	movs	r3, #0
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	e0ae      	b.n	800032a <getKeyInput+0x16a>

		KeyReg0[i] = KeyReg1[i];
 80001cc:	4a5b      	ldr	r2, [pc, #364]	; (800033c <getKeyInput+0x17c>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	495a      	ldr	r1, [pc, #360]	; (8000340 <getKeyInput+0x180>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  	KeyReg1[i]= KeyReg2[i];
 80001dc:	4a59      	ldr	r2, [pc, #356]	; (8000344 <getKeyInput+0x184>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e4:	4955      	ldr	r1, [pc, #340]	; (800033c <getKeyInput+0x17c>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  	if( i == 0 ) KeyReg2[i] = HAL_GPIO_ReadPin(Button1, B1_PIN);
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d10b      	bne.n	800020a <getKeyInput+0x4a>
 80001f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f6:	4854      	ldr	r0, [pc, #336]	; (8000348 <getKeyInput+0x188>)
 80001f8:	f002 f928 	bl	800244c <HAL_GPIO_ReadPin>
 80001fc:	4603      	mov	r3, r0
 80001fe:	4619      	mov	r1, r3
 8000200:	4a50      	ldr	r2, [pc, #320]	; (8000344 <getKeyInput+0x184>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000208:	e01c      	b.n	8000244 <getKeyInput+0x84>
	  	else if (i == 1) KeyReg2[i] = HAL_GPIO_ReadPin(Button2, B2_PIN);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b01      	cmp	r3, #1
 800020e:	d10b      	bne.n	8000228 <getKeyInput+0x68>
 8000210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000214:	484c      	ldr	r0, [pc, #304]	; (8000348 <getKeyInput+0x188>)
 8000216:	f002 f919 	bl	800244c <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	4619      	mov	r1, r3
 800021e:	4a49      	ldr	r2, [pc, #292]	; (8000344 <getKeyInput+0x184>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000226:	e00d      	b.n	8000244 <getKeyInput+0x84>
	  	else if (i == 2) KeyReg2[i] = HAL_GPIO_ReadPin(Button3, B3_PIN);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b02      	cmp	r3, #2
 800022c:	d10a      	bne.n	8000244 <getKeyInput+0x84>
 800022e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000232:	4846      	ldr	r0, [pc, #280]	; (800034c <getKeyInput+0x18c>)
 8000234:	f002 f90a 	bl	800244c <HAL_GPIO_ReadPin>
 8000238:	4603      	mov	r3, r0
 800023a:	4619      	mov	r1, r3
 800023c:	4a41      	ldr	r2, [pc, #260]	; (8000344 <getKeyInput+0x184>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


	  	if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000244:	4a3e      	ldr	r2, [pc, #248]	; (8000340 <getKeyInput+0x180>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024c:	493b      	ldr	r1, [pc, #236]	; (800033c <getKeyInput+0x17c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000254:	429a      	cmp	r2, r3
 8000256:	d15e      	bne.n	8000316 <getKeyInput+0x156>
 8000258:	4a38      	ldr	r2, [pc, #224]	; (800033c <getKeyInput+0x17c>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000260:	4938      	ldr	r1, [pc, #224]	; (8000344 <getKeyInput+0x184>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000268:	429a      	cmp	r2, r3
 800026a:	d154      	bne.n	8000316 <getKeyInput+0x156>
	  		if (KeyReg3[i] != KeyReg2[i]){
 800026c:	4a38      	ldr	r2, [pc, #224]	; (8000350 <getKeyInput+0x190>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000274:	4933      	ldr	r1, [pc, #204]	; (8000344 <getKeyInput+0x184>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027c:	429a      	cmp	r2, r3
 800027e:	d016      	beq.n	80002ae <getKeyInput+0xee>
	  	       KeyReg3[i] = KeyReg2[i];
 8000280:	4a30      	ldr	r2, [pc, #192]	; (8000344 <getKeyInput+0x184>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000288:	4931      	ldr	r1, [pc, #196]	; (8000350 <getKeyInput+0x190>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  	      if (KeyReg2[i] == PRESSED_STATE){
 8000290:	4a2c      	ldr	r2, [pc, #176]	; (8000344 <getKeyInput+0x184>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d142      	bne.n	8000322 <getKeyInput+0x162>
	  	        TimeOutForKeyPress[i] = 0;
 800029c:	4a2d      	ldr	r2, [pc, #180]	; (8000354 <getKeyInput+0x194>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2100      	movs	r1, #0
 80002a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	        subKeyProcess(i);			// flag = 1
 80002a6:	6878      	ldr	r0, [r7, #4]
 80002a8:	f7ff ff6a 	bl	8000180 <subKeyProcess>
	  		if (KeyReg3[i] != KeyReg2[i]){
 80002ac:	e039      	b.n	8000322 <getKeyInput+0x162>
	  	      }
	  	    }
	  	   else{
	  		   if(long_flag[i] == 1){
 80002ae:	4a2a      	ldr	r2, [pc, #168]	; (8000358 <getKeyInput+0x198>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d114      	bne.n	80002e4 <getKeyInput+0x124>
	 	  		  TimeOutForKeyPress[i]++;
 80002ba:	4a26      	ldr	r2, [pc, #152]	; (8000354 <getKeyInput+0x194>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c2:	1c5a      	adds	r2, r3, #1
 80002c4:	4923      	ldr	r1, [pc, #140]	; (8000354 <getKeyInput+0x194>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 	  	       if(TimeOutForKeyPress[i] > TIME_AUTO  ){
 80002cc:	4a21      	ldr	r2, [pc, #132]	; (8000354 <getKeyInput+0x194>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d4:	2b64      	cmp	r3, #100	; 0x64
 80002d6:	dd24      	ble.n	8000322 <getKeyInput+0x162>
	 	  	   // 	subKeyLongPress(i);
	 	  	          KeyReg3[i] = NORMAL_STATE;
 80002d8:	4a1d      	ldr	r2, [pc, #116]	; (8000350 <getKeyInput+0x190>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2101      	movs	r1, #1
 80002de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  		if (KeyReg3[i] != KeyReg2[i]){
 80002e2:	e01e      	b.n	8000322 <getKeyInput+0x162>
	 	  	        }
	  		   }else{
		  		   	TimeOutForKeyPress[i]++;
 80002e4:	4a1b      	ldr	r2, [pc, #108]	; (8000354 <getKeyInput+0x194>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ec:	1c5a      	adds	r2, r3, #1
 80002ee:	4919      	ldr	r1, [pc, #100]	; (8000354 <getKeyInput+0x194>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  	        if(TimeOutForKeyPress[i] > TIME_HOLD  ){
 80002f6:	4a17      	ldr	r2, [pc, #92]	; (8000354 <getKeyInput+0x194>)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000302:	dd0e      	ble.n	8000322 <getKeyInput+0x162>
		  	          subKeyLongPress(i);		// flag = 1
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f7ff ff4b 	bl	80001a0 <subKeyLongPress>
		  	          KeyReg3[i] = NORMAL_STATE;
 800030a:	4a11      	ldr	r2, [pc, #68]	; (8000350 <getKeyInput+0x190>)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2101      	movs	r1, #1
 8000310:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  		if (KeyReg3[i] != KeyReg2[i]){
 8000314:	e005      	b.n	8000322 <getKeyInput+0x162>
		  	        }
	  		   }
	  	    }
	  	  }
	  	else{
	  		long_flag[i] = 0;
 8000316:	4a10      	ldr	r2, [pc, #64]	; (8000358 <getKeyInput+0x198>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2100      	movs	r1, #0
 800031c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000320:	e000      	b.n	8000324 <getKeyInput+0x164>
	  		if (KeyReg3[i] != KeyReg2[i]){
 8000322:	bf00      	nop
	for (int i = 0 ; i < NUM_OF_BUTTONS ; i++){
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3301      	adds	r3, #1
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2b02      	cmp	r3, #2
 800032e:	f77f af4d 	ble.w	80001cc <getKeyInput+0xc>
	  	}
	}

}
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	2000000c 	.word	0x2000000c
 8000340:	20000000 	.word	0x20000000
 8000344:	20000018 	.word	0x20000018
 8000348:	40011000 	.word	0x40011000
 800034c:	40010c00 	.word	0x40010c00
 8000350:	20000024 	.word	0x20000024
 8000354:	20000070 	.word	0x20000070
 8000358:	20000064 	.word	0x20000064

0800035c <display7SEG_0>:

#include "display7SEG.h"
void display7SEG_0(int num){
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	if(num >= 10) num = 0 ;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b09      	cmp	r3, #9
 8000368:	dd01      	ble.n	800036e <display7SEG_0+0x12>
 800036a:	2300      	movs	r3, #0
 800036c:	607b      	str	r3, [r7, #4]
	if(num == 0){
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d123      	bne.n	80003bc <display7SEG_0+0x60>
		HAL_GPIO_WritePin(GPIO_1, P_SEG0, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2101      	movs	r1, #1
 8000378:	48c0      	ldr	r0, [pc, #768]	; (800067c <display7SEG_0+0x320>)
 800037a:	f002 f87e 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG1, RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2102      	movs	r1, #2
 8000382:	48be      	ldr	r0, [pc, #760]	; (800067c <display7SEG_0+0x320>)
 8000384:	f002 f879 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG2, RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2104      	movs	r1, #4
 800038c:	48bb      	ldr	r0, [pc, #748]	; (800067c <display7SEG_0+0x320>)
 800038e:	f002 f874 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG3, RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2108      	movs	r1, #8
 8000396:	48b9      	ldr	r0, [pc, #740]	; (800067c <display7SEG_0+0x320>)
 8000398:	f002 f86f 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG4, RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2110      	movs	r1, #16
 80003a0:	48b6      	ldr	r0, [pc, #728]	; (800067c <display7SEG_0+0x320>)
 80003a2:	f002 f86a 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG5, RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2120      	movs	r1, #32
 80003aa:	48b4      	ldr	r0, [pc, #720]	; (800067c <display7SEG_0+0x320>)
 80003ac:	f002 f865 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG6, SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	2140      	movs	r1, #64	; 0x40
 80003b4:	48b1      	ldr	r0, [pc, #708]	; (800067c <display7SEG_0+0x320>)
 80003b6:	f002 f860 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG4, SET);
		HAL_GPIO_WritePin(GPIO_1, P_SEG5, RESET);
		HAL_GPIO_WritePin(GPIO_1, P_SEG6, RESET);

	}
}
 80003ba:	e15a      	b.n	8000672 <display7SEG_0+0x316>
	}else if(num == 1){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d123      	bne.n	800040a <display7SEG_0+0xae>
		HAL_GPIO_WritePin(GPIO_1, P_SEG0, SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	2101      	movs	r1, #1
 80003c6:	48ad      	ldr	r0, [pc, #692]	; (800067c <display7SEG_0+0x320>)
 80003c8:	f002 f857 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG1, RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2102      	movs	r1, #2
 80003d0:	48aa      	ldr	r0, [pc, #680]	; (800067c <display7SEG_0+0x320>)
 80003d2:	f002 f852 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG2, RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2104      	movs	r1, #4
 80003da:	48a8      	ldr	r0, [pc, #672]	; (800067c <display7SEG_0+0x320>)
 80003dc:	f002 f84d 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG3, SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	2108      	movs	r1, #8
 80003e4:	48a5      	ldr	r0, [pc, #660]	; (800067c <display7SEG_0+0x320>)
 80003e6:	f002 f848 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG4, SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2110      	movs	r1, #16
 80003ee:	48a3      	ldr	r0, [pc, #652]	; (800067c <display7SEG_0+0x320>)
 80003f0:	f002 f843 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG5, SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2120      	movs	r1, #32
 80003f8:	48a0      	ldr	r0, [pc, #640]	; (800067c <display7SEG_0+0x320>)
 80003fa:	f002 f83e 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG6, SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	489e      	ldr	r0, [pc, #632]	; (800067c <display7SEG_0+0x320>)
 8000404:	f002 f839 	bl	800247a <HAL_GPIO_WritePin>
}
 8000408:	e133      	b.n	8000672 <display7SEG_0+0x316>
	}else if(num == 2){
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2b02      	cmp	r3, #2
 800040e:	d123      	bne.n	8000458 <display7SEG_0+0xfc>
		HAL_GPIO_WritePin(GPIO_1, P_SEG0, RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2101      	movs	r1, #1
 8000414:	4899      	ldr	r0, [pc, #612]	; (800067c <display7SEG_0+0x320>)
 8000416:	f002 f830 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG1, RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2102      	movs	r1, #2
 800041e:	4897      	ldr	r0, [pc, #604]	; (800067c <display7SEG_0+0x320>)
 8000420:	f002 f82b 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG2, SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2104      	movs	r1, #4
 8000428:	4894      	ldr	r0, [pc, #592]	; (800067c <display7SEG_0+0x320>)
 800042a:	f002 f826 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG3, RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2108      	movs	r1, #8
 8000432:	4892      	ldr	r0, [pc, #584]	; (800067c <display7SEG_0+0x320>)
 8000434:	f002 f821 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG4, RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2110      	movs	r1, #16
 800043c:	488f      	ldr	r0, [pc, #572]	; (800067c <display7SEG_0+0x320>)
 800043e:	f002 f81c 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG5, SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2120      	movs	r1, #32
 8000446:	488d      	ldr	r0, [pc, #564]	; (800067c <display7SEG_0+0x320>)
 8000448:	f002 f817 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG6, RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2140      	movs	r1, #64	; 0x40
 8000450:	488a      	ldr	r0, [pc, #552]	; (800067c <display7SEG_0+0x320>)
 8000452:	f002 f812 	bl	800247a <HAL_GPIO_WritePin>
}
 8000456:	e10c      	b.n	8000672 <display7SEG_0+0x316>
	}else if(num == 3){
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2b03      	cmp	r3, #3
 800045c:	d123      	bne.n	80004a6 <display7SEG_0+0x14a>
		HAL_GPIO_WritePin(GPIO_1, P_SEG0, RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2101      	movs	r1, #1
 8000462:	4886      	ldr	r0, [pc, #536]	; (800067c <display7SEG_0+0x320>)
 8000464:	f002 f809 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG1, RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2102      	movs	r1, #2
 800046c:	4883      	ldr	r0, [pc, #524]	; (800067c <display7SEG_0+0x320>)
 800046e:	f002 f804 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG2, RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2104      	movs	r1, #4
 8000476:	4881      	ldr	r0, [pc, #516]	; (800067c <display7SEG_0+0x320>)
 8000478:	f001 ffff 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG3, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2108      	movs	r1, #8
 8000480:	487e      	ldr	r0, [pc, #504]	; (800067c <display7SEG_0+0x320>)
 8000482:	f001 fffa 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG4, SET);
 8000486:	2201      	movs	r2, #1
 8000488:	2110      	movs	r1, #16
 800048a:	487c      	ldr	r0, [pc, #496]	; (800067c <display7SEG_0+0x320>)
 800048c:	f001 fff5 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG5, SET);
 8000490:	2201      	movs	r2, #1
 8000492:	2120      	movs	r1, #32
 8000494:	4879      	ldr	r0, [pc, #484]	; (800067c <display7SEG_0+0x320>)
 8000496:	f001 fff0 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG6, RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2140      	movs	r1, #64	; 0x40
 800049e:	4877      	ldr	r0, [pc, #476]	; (800067c <display7SEG_0+0x320>)
 80004a0:	f001 ffeb 	bl	800247a <HAL_GPIO_WritePin>
}
 80004a4:	e0e5      	b.n	8000672 <display7SEG_0+0x316>
	}else if( num == 4){
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2b04      	cmp	r3, #4
 80004aa:	d123      	bne.n	80004f4 <display7SEG_0+0x198>
		HAL_GPIO_WritePin(GPIO_1, P_SEG0, SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	2101      	movs	r1, #1
 80004b0:	4872      	ldr	r0, [pc, #456]	; (800067c <display7SEG_0+0x320>)
 80004b2:	f001 ffe2 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG1, RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2102      	movs	r1, #2
 80004ba:	4870      	ldr	r0, [pc, #448]	; (800067c <display7SEG_0+0x320>)
 80004bc:	f001 ffdd 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG2, RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2104      	movs	r1, #4
 80004c4:	486d      	ldr	r0, [pc, #436]	; (800067c <display7SEG_0+0x320>)
 80004c6:	f001 ffd8 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG3, SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2108      	movs	r1, #8
 80004ce:	486b      	ldr	r0, [pc, #428]	; (800067c <display7SEG_0+0x320>)
 80004d0:	f001 ffd3 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG4, SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2110      	movs	r1, #16
 80004d8:	4868      	ldr	r0, [pc, #416]	; (800067c <display7SEG_0+0x320>)
 80004da:	f001 ffce 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG5, RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	4866      	ldr	r0, [pc, #408]	; (800067c <display7SEG_0+0x320>)
 80004e4:	f001 ffc9 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG6, RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2140      	movs	r1, #64	; 0x40
 80004ec:	4863      	ldr	r0, [pc, #396]	; (800067c <display7SEG_0+0x320>)
 80004ee:	f001 ffc4 	bl	800247a <HAL_GPIO_WritePin>
}
 80004f2:	e0be      	b.n	8000672 <display7SEG_0+0x316>
	}else if(num == 5){
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b05      	cmp	r3, #5
 80004f8:	d123      	bne.n	8000542 <display7SEG_0+0x1e6>
		HAL_GPIO_WritePin(GPIO_1, P_SEG0, RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2101      	movs	r1, #1
 80004fe:	485f      	ldr	r0, [pc, #380]	; (800067c <display7SEG_0+0x320>)
 8000500:	f001 ffbb 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG1, SET);
 8000504:	2201      	movs	r2, #1
 8000506:	2102      	movs	r1, #2
 8000508:	485c      	ldr	r0, [pc, #368]	; (800067c <display7SEG_0+0x320>)
 800050a:	f001 ffb6 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG2, RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	2104      	movs	r1, #4
 8000512:	485a      	ldr	r0, [pc, #360]	; (800067c <display7SEG_0+0x320>)
 8000514:	f001 ffb1 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG3, RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2108      	movs	r1, #8
 800051c:	4857      	ldr	r0, [pc, #348]	; (800067c <display7SEG_0+0x320>)
 800051e:	f001 ffac 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG4, SET);
 8000522:	2201      	movs	r2, #1
 8000524:	2110      	movs	r1, #16
 8000526:	4855      	ldr	r0, [pc, #340]	; (800067c <display7SEG_0+0x320>)
 8000528:	f001 ffa7 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG5, RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2120      	movs	r1, #32
 8000530:	4852      	ldr	r0, [pc, #328]	; (800067c <display7SEG_0+0x320>)
 8000532:	f001 ffa2 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG6, RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2140      	movs	r1, #64	; 0x40
 800053a:	4850      	ldr	r0, [pc, #320]	; (800067c <display7SEG_0+0x320>)
 800053c:	f001 ff9d 	bl	800247a <HAL_GPIO_WritePin>
}
 8000540:	e097      	b.n	8000672 <display7SEG_0+0x316>
	}else if(num == 6){
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b06      	cmp	r3, #6
 8000546:	d123      	bne.n	8000590 <display7SEG_0+0x234>
		HAL_GPIO_WritePin(GPIO_1, P_SEG0, RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2101      	movs	r1, #1
 800054c:	484b      	ldr	r0, [pc, #300]	; (800067c <display7SEG_0+0x320>)
 800054e:	f001 ff94 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG1, SET);
 8000552:	2201      	movs	r2, #1
 8000554:	2102      	movs	r1, #2
 8000556:	4849      	ldr	r0, [pc, #292]	; (800067c <display7SEG_0+0x320>)
 8000558:	f001 ff8f 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG2, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2104      	movs	r1, #4
 8000560:	4846      	ldr	r0, [pc, #280]	; (800067c <display7SEG_0+0x320>)
 8000562:	f001 ff8a 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG3, RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2108      	movs	r1, #8
 800056a:	4844      	ldr	r0, [pc, #272]	; (800067c <display7SEG_0+0x320>)
 800056c:	f001 ff85 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG4, RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2110      	movs	r1, #16
 8000574:	4841      	ldr	r0, [pc, #260]	; (800067c <display7SEG_0+0x320>)
 8000576:	f001 ff80 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG5, RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2120      	movs	r1, #32
 800057e:	483f      	ldr	r0, [pc, #252]	; (800067c <display7SEG_0+0x320>)
 8000580:	f001 ff7b 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG6, RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2140      	movs	r1, #64	; 0x40
 8000588:	483c      	ldr	r0, [pc, #240]	; (800067c <display7SEG_0+0x320>)
 800058a:	f001 ff76 	bl	800247a <HAL_GPIO_WritePin>
}
 800058e:	e070      	b.n	8000672 <display7SEG_0+0x316>
	}else if(num == 7){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b07      	cmp	r3, #7
 8000594:	d123      	bne.n	80005de <display7SEG_0+0x282>
		HAL_GPIO_WritePin(GPIO_1, P_SEG0, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2101      	movs	r1, #1
 800059a:	4838      	ldr	r0, [pc, #224]	; (800067c <display7SEG_0+0x320>)
 800059c:	f001 ff6d 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG1, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2102      	movs	r1, #2
 80005a4:	4835      	ldr	r0, [pc, #212]	; (800067c <display7SEG_0+0x320>)
 80005a6:	f001 ff68 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG2, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2104      	movs	r1, #4
 80005ae:	4833      	ldr	r0, [pc, #204]	; (800067c <display7SEG_0+0x320>)
 80005b0:	f001 ff63 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG3, SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2108      	movs	r1, #8
 80005b8:	4830      	ldr	r0, [pc, #192]	; (800067c <display7SEG_0+0x320>)
 80005ba:	f001 ff5e 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG4, SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2110      	movs	r1, #16
 80005c2:	482e      	ldr	r0, [pc, #184]	; (800067c <display7SEG_0+0x320>)
 80005c4:	f001 ff59 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG5, SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2120      	movs	r1, #32
 80005cc:	482b      	ldr	r0, [pc, #172]	; (800067c <display7SEG_0+0x320>)
 80005ce:	f001 ff54 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG6, SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2140      	movs	r1, #64	; 0x40
 80005d6:	4829      	ldr	r0, [pc, #164]	; (800067c <display7SEG_0+0x320>)
 80005d8:	f001 ff4f 	bl	800247a <HAL_GPIO_WritePin>
}
 80005dc:	e049      	b.n	8000672 <display7SEG_0+0x316>
	}else if (num == 8 ){
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b08      	cmp	r3, #8
 80005e2:	d123      	bne.n	800062c <display7SEG_0+0x2d0>
		HAL_GPIO_WritePin(GPIO_1, P_SEG0, RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2101      	movs	r1, #1
 80005e8:	4824      	ldr	r0, [pc, #144]	; (800067c <display7SEG_0+0x320>)
 80005ea:	f001 ff46 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG1, RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2102      	movs	r1, #2
 80005f2:	4822      	ldr	r0, [pc, #136]	; (800067c <display7SEG_0+0x320>)
 80005f4:	f001 ff41 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG2, RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2104      	movs	r1, #4
 80005fc:	481f      	ldr	r0, [pc, #124]	; (800067c <display7SEG_0+0x320>)
 80005fe:	f001 ff3c 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG3, RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2108      	movs	r1, #8
 8000606:	481d      	ldr	r0, [pc, #116]	; (800067c <display7SEG_0+0x320>)
 8000608:	f001 ff37 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG4, RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2110      	movs	r1, #16
 8000610:	481a      	ldr	r0, [pc, #104]	; (800067c <display7SEG_0+0x320>)
 8000612:	f001 ff32 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG5, RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2120      	movs	r1, #32
 800061a:	4818      	ldr	r0, [pc, #96]	; (800067c <display7SEG_0+0x320>)
 800061c:	f001 ff2d 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG6, RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2140      	movs	r1, #64	; 0x40
 8000624:	4815      	ldr	r0, [pc, #84]	; (800067c <display7SEG_0+0x320>)
 8000626:	f001 ff28 	bl	800247a <HAL_GPIO_WritePin>
}
 800062a:	e022      	b.n	8000672 <display7SEG_0+0x316>
		HAL_GPIO_WritePin(GPIO_1, P_SEG0, RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <display7SEG_0+0x320>)
 8000632:	f001 ff22 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG1, RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2102      	movs	r1, #2
 800063a:	4810      	ldr	r0, [pc, #64]	; (800067c <display7SEG_0+0x320>)
 800063c:	f001 ff1d 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG2, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2104      	movs	r1, #4
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <display7SEG_0+0x320>)
 8000646:	f001 ff18 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG3, RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2108      	movs	r1, #8
 800064e:	480b      	ldr	r0, [pc, #44]	; (800067c <display7SEG_0+0x320>)
 8000650:	f001 ff13 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG4, SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2110      	movs	r1, #16
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <display7SEG_0+0x320>)
 800065a:	f001 ff0e 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG5, RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2120      	movs	r1, #32
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <display7SEG_0+0x320>)
 8000664:	f001 ff09 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_1, P_SEG6, RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2140      	movs	r1, #64	; 0x40
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <display7SEG_0+0x320>)
 800066e:	f001 ff04 	bl	800247a <HAL_GPIO_WritePin>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40010c00 	.word	0x40010c00

08000680 <display7SEG_1>:
void display7SEG_1(int num){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
		if(num >= 10) num = 0 ;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b09      	cmp	r3, #9
 800068c:	dd01      	ble.n	8000692 <display7SEG_1+0x12>
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
		if(num == 0){
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d129      	bne.n	80006ec <display7SEG_1+0x6c>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG0, RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	48c7      	ldr	r0, [pc, #796]	; (80009bc <display7SEG_1+0x33c>)
 800069e:	f001 feec 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG1, RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a8:	48c4      	ldr	r0, [pc, #784]	; (80009bc <display7SEG_1+0x33c>)
 80006aa:	f001 fee6 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG2, RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b4:	48c1      	ldr	r0, [pc, #772]	; (80009bc <display7SEG_1+0x33c>)
 80006b6:	f001 fee0 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG3, RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c0:	48be      	ldr	r0, [pc, #760]	; (80009bc <display7SEG_1+0x33c>)
 80006c2:	f001 feda 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG4, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006cc:	48bb      	ldr	r0, [pc, #748]	; (80009bc <display7SEG_1+0x33c>)
 80006ce:	f001 fed4 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG5, RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d8:	48b8      	ldr	r0, [pc, #736]	; (80009bc <display7SEG_1+0x33c>)
 80006da:	f001 fece 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG6, SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e4:	48b5      	ldr	r0, [pc, #724]	; (80009bc <display7SEG_1+0x33c>)
 80006e6:	f001 fec8 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG4, SET);
			HAL_GPIO_WritePin(GPIO_1, P1_SEG5, RESET);
			HAL_GPIO_WritePin(GPIO_1, P1_SEG6, RESET);

		}
}
 80006ea:	e192      	b.n	8000a12 <display7SEG_1+0x392>
		}else if(num == 1){
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d129      	bne.n	8000746 <display7SEG_1+0xc6>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG0, SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	48b1      	ldr	r0, [pc, #708]	; (80009bc <display7SEG_1+0x33c>)
 80006f8:	f001 febf 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG1, RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000702:	48ae      	ldr	r0, [pc, #696]	; (80009bc <display7SEG_1+0x33c>)
 8000704:	f001 feb9 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG2, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070e:	48ab      	ldr	r0, [pc, #684]	; (80009bc <display7SEG_1+0x33c>)
 8000710:	f001 feb3 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG3, SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071a:	48a8      	ldr	r0, [pc, #672]	; (80009bc <display7SEG_1+0x33c>)
 800071c:	f001 fead 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG4, SET);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000726:	48a5      	ldr	r0, [pc, #660]	; (80009bc <display7SEG_1+0x33c>)
 8000728:	f001 fea7 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG5, SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	48a2      	ldr	r0, [pc, #648]	; (80009bc <display7SEG_1+0x33c>)
 8000734:	f001 fea1 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG6, SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073e:	489f      	ldr	r0, [pc, #636]	; (80009bc <display7SEG_1+0x33c>)
 8000740:	f001 fe9b 	bl	800247a <HAL_GPIO_WritePin>
}
 8000744:	e165      	b.n	8000a12 <display7SEG_1+0x392>
		}else if(num == 2){
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b02      	cmp	r3, #2
 800074a:	d129      	bne.n	80007a0 <display7SEG_1+0x120>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG0, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2180      	movs	r1, #128	; 0x80
 8000750:	489a      	ldr	r0, [pc, #616]	; (80009bc <display7SEG_1+0x33c>)
 8000752:	f001 fe92 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG1, RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075c:	4897      	ldr	r0, [pc, #604]	; (80009bc <display7SEG_1+0x33c>)
 800075e:	f001 fe8c 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG2, SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000768:	4894      	ldr	r0, [pc, #592]	; (80009bc <display7SEG_1+0x33c>)
 800076a:	f001 fe86 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG3, RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000774:	4891      	ldr	r0, [pc, #580]	; (80009bc <display7SEG_1+0x33c>)
 8000776:	f001 fe80 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG4, RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000780:	488e      	ldr	r0, [pc, #568]	; (80009bc <display7SEG_1+0x33c>)
 8000782:	f001 fe7a 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG5, SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078c:	488b      	ldr	r0, [pc, #556]	; (80009bc <display7SEG_1+0x33c>)
 800078e:	f001 fe74 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG6, RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000798:	4888      	ldr	r0, [pc, #544]	; (80009bc <display7SEG_1+0x33c>)
 800079a:	f001 fe6e 	bl	800247a <HAL_GPIO_WritePin>
}
 800079e:	e138      	b.n	8000a12 <display7SEG_1+0x392>
		}else if(num == 3){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d129      	bne.n	80007fa <display7SEG_1+0x17a>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG0, RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	4884      	ldr	r0, [pc, #528]	; (80009bc <display7SEG_1+0x33c>)
 80007ac:	f001 fe65 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG1, RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b6:	4881      	ldr	r0, [pc, #516]	; (80009bc <display7SEG_1+0x33c>)
 80007b8:	f001 fe5f 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG2, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c2:	487e      	ldr	r0, [pc, #504]	; (80009bc <display7SEG_1+0x33c>)
 80007c4:	f001 fe59 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG3, RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ce:	487b      	ldr	r0, [pc, #492]	; (80009bc <display7SEG_1+0x33c>)
 80007d0:	f001 fe53 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG4, SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007da:	4878      	ldr	r0, [pc, #480]	; (80009bc <display7SEG_1+0x33c>)
 80007dc:	f001 fe4d 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG5, SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e6:	4875      	ldr	r0, [pc, #468]	; (80009bc <display7SEG_1+0x33c>)
 80007e8:	f001 fe47 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG6, RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f2:	4872      	ldr	r0, [pc, #456]	; (80009bc <display7SEG_1+0x33c>)
 80007f4:	f001 fe41 	bl	800247a <HAL_GPIO_WritePin>
}
 80007f8:	e10b      	b.n	8000a12 <display7SEG_1+0x392>
		}else if( num == 4){
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	d129      	bne.n	8000854 <display7SEG_1+0x1d4>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG0, SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2180      	movs	r1, #128	; 0x80
 8000804:	486d      	ldr	r0, [pc, #436]	; (80009bc <display7SEG_1+0x33c>)
 8000806:	f001 fe38 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG1, RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000810:	486a      	ldr	r0, [pc, #424]	; (80009bc <display7SEG_1+0x33c>)
 8000812:	f001 fe32 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG2, RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800081c:	4867      	ldr	r0, [pc, #412]	; (80009bc <display7SEG_1+0x33c>)
 800081e:	f001 fe2c 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG3, SET);
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000828:	4864      	ldr	r0, [pc, #400]	; (80009bc <display7SEG_1+0x33c>)
 800082a:	f001 fe26 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG4, SET);
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000834:	4861      	ldr	r0, [pc, #388]	; (80009bc <display7SEG_1+0x33c>)
 8000836:	f001 fe20 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG5, RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000840:	485e      	ldr	r0, [pc, #376]	; (80009bc <display7SEG_1+0x33c>)
 8000842:	f001 fe1a 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG6, RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084c:	485b      	ldr	r0, [pc, #364]	; (80009bc <display7SEG_1+0x33c>)
 800084e:	f001 fe14 	bl	800247a <HAL_GPIO_WritePin>
}
 8000852:	e0de      	b.n	8000a12 <display7SEG_1+0x392>
		}else if(num == 5){
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b05      	cmp	r3, #5
 8000858:	d129      	bne.n	80008ae <display7SEG_1+0x22e>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG0, RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	4857      	ldr	r0, [pc, #348]	; (80009bc <display7SEG_1+0x33c>)
 8000860:	f001 fe0b 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG1, SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086a:	4854      	ldr	r0, [pc, #336]	; (80009bc <display7SEG_1+0x33c>)
 800086c:	f001 fe05 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG2, RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000876:	4851      	ldr	r0, [pc, #324]	; (80009bc <display7SEG_1+0x33c>)
 8000878:	f001 fdff 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG3, RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000882:	484e      	ldr	r0, [pc, #312]	; (80009bc <display7SEG_1+0x33c>)
 8000884:	f001 fdf9 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG4, SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800088e:	484b      	ldr	r0, [pc, #300]	; (80009bc <display7SEG_1+0x33c>)
 8000890:	f001 fdf3 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG5, RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089a:	4848      	ldr	r0, [pc, #288]	; (80009bc <display7SEG_1+0x33c>)
 800089c:	f001 fded 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG6, RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a6:	4845      	ldr	r0, [pc, #276]	; (80009bc <display7SEG_1+0x33c>)
 80008a8:	f001 fde7 	bl	800247a <HAL_GPIO_WritePin>
}
 80008ac:	e0b1      	b.n	8000a12 <display7SEG_1+0x392>
		}else if(num == 6){
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b06      	cmp	r3, #6
 80008b2:	d129      	bne.n	8000908 <display7SEG_1+0x288>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG0, RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	4840      	ldr	r0, [pc, #256]	; (80009bc <display7SEG_1+0x33c>)
 80008ba:	f001 fdde 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG1, SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c4:	483d      	ldr	r0, [pc, #244]	; (80009bc <display7SEG_1+0x33c>)
 80008c6:	f001 fdd8 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG2, RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d0:	483a      	ldr	r0, [pc, #232]	; (80009bc <display7SEG_1+0x33c>)
 80008d2:	f001 fdd2 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG3, RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008dc:	4837      	ldr	r0, [pc, #220]	; (80009bc <display7SEG_1+0x33c>)
 80008de:	f001 fdcc 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG4, RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008e8:	4834      	ldr	r0, [pc, #208]	; (80009bc <display7SEG_1+0x33c>)
 80008ea:	f001 fdc6 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG5, RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f4:	4831      	ldr	r0, [pc, #196]	; (80009bc <display7SEG_1+0x33c>)
 80008f6:	f001 fdc0 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG6, RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000900:	482e      	ldr	r0, [pc, #184]	; (80009bc <display7SEG_1+0x33c>)
 8000902:	f001 fdba 	bl	800247a <HAL_GPIO_WritePin>
}
 8000906:	e084      	b.n	8000a12 <display7SEG_1+0x392>
		}else if(num == 7){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b07      	cmp	r3, #7
 800090c:	d129      	bne.n	8000962 <display7SEG_1+0x2e2>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG0, RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	482a      	ldr	r0, [pc, #168]	; (80009bc <display7SEG_1+0x33c>)
 8000914:	f001 fdb1 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG1, RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091e:	4827      	ldr	r0, [pc, #156]	; (80009bc <display7SEG_1+0x33c>)
 8000920:	f001 fdab 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG2, RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092a:	4824      	ldr	r0, [pc, #144]	; (80009bc <display7SEG_1+0x33c>)
 800092c:	f001 fda5 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG3, SET);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000936:	4821      	ldr	r0, [pc, #132]	; (80009bc <display7SEG_1+0x33c>)
 8000938:	f001 fd9f 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG4, SET);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000942:	481e      	ldr	r0, [pc, #120]	; (80009bc <display7SEG_1+0x33c>)
 8000944:	f001 fd99 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG5, SET);
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800094e:	481b      	ldr	r0, [pc, #108]	; (80009bc <display7SEG_1+0x33c>)
 8000950:	f001 fd93 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG6, SET);
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095a:	4818      	ldr	r0, [pc, #96]	; (80009bc <display7SEG_1+0x33c>)
 800095c:	f001 fd8d 	bl	800247a <HAL_GPIO_WritePin>
}
 8000960:	e057      	b.n	8000a12 <display7SEG_1+0x392>
		}else if (num == 8 ){
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b08      	cmp	r3, #8
 8000966:	d12b      	bne.n	80009c0 <display7SEG_1+0x340>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG0, RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2180      	movs	r1, #128	; 0x80
 800096c:	4813      	ldr	r0, [pc, #76]	; (80009bc <display7SEG_1+0x33c>)
 800096e:	f001 fd84 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG1, RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000978:	4810      	ldr	r0, [pc, #64]	; (80009bc <display7SEG_1+0x33c>)
 800097a:	f001 fd7e 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG2, RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <display7SEG_1+0x33c>)
 8000986:	f001 fd78 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG3, RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000990:	480a      	ldr	r0, [pc, #40]	; (80009bc <display7SEG_1+0x33c>)
 8000992:	f001 fd72 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG4, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800099c:	4807      	ldr	r0, [pc, #28]	; (80009bc <display7SEG_1+0x33c>)
 800099e:	f001 fd6c 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG5, RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <display7SEG_1+0x33c>)
 80009aa:	f001 fd66 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG6, RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b4:	4801      	ldr	r0, [pc, #4]	; (80009bc <display7SEG_1+0x33c>)
 80009b6:	f001 fd60 	bl	800247a <HAL_GPIO_WritePin>
}
 80009ba:	e02a      	b.n	8000a12 <display7SEG_1+0x392>
 80009bc:	40010c00 	.word	0x40010c00
			HAL_GPIO_WritePin(GPIO_1, P1_SEG0, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2180      	movs	r1, #128	; 0x80
 80009c4:	4815      	ldr	r0, [pc, #84]	; (8000a1c <display7SEG_1+0x39c>)
 80009c6:	f001 fd58 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG1, RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d0:	4812      	ldr	r0, [pc, #72]	; (8000a1c <display7SEG_1+0x39c>)
 80009d2:	f001 fd52 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG2, RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009dc:	480f      	ldr	r0, [pc, #60]	; (8000a1c <display7SEG_1+0x39c>)
 80009de:	f001 fd4c 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG3, RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <display7SEG_1+0x39c>)
 80009ea:	f001 fd46 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG4, SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <display7SEG_1+0x39c>)
 80009f6:	f001 fd40 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG5, RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a00:	4806      	ldr	r0, [pc, #24]	; (8000a1c <display7SEG_1+0x39c>)
 8000a02:	f001 fd3a 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_1, P1_SEG6, RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <display7SEG_1+0x39c>)
 8000a0e:	f001 fd34 	bl	800247a <HAL_GPIO_WritePin>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40010c00 	.word	0x40010c00

08000a20 <fsm_automatic_run_0>:


#include "fsm_automatic.h"
int index1 = 0 ;
void fsm_automatic_run_0(){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	switch (status_traffic_0) {
 8000a24:	4baa      	ldr	r3, [pc, #680]	; (8000cd0 <fsm_automatic_run_0+0x2b0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b21      	cmp	r3, #33	; 0x21
 8000a2a:	f000 80ec 	beq.w	8000c06 <fsm_automatic_run_0+0x1e6>
 8000a2e:	2b21      	cmp	r3, #33	; 0x21
 8000a30:	f300 8144 	bgt.w	8000cbc <fsm_automatic_run_0+0x29c>
 8000a34:	2b20      	cmp	r3, #32
 8000a36:	f000 808b 	beq.w	8000b50 <fsm_automatic_run_0+0x130>
 8000a3a:	2b20      	cmp	r3, #32
 8000a3c:	f300 813e 	bgt.w	8000cbc <fsm_automatic_run_0+0x29c>
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d002      	beq.n	8000a4a <fsm_automatic_run_0+0x2a>
 8000a44:	2b1f      	cmp	r3, #31
 8000a46:	d027      	beq.n	8000a98 <fsm_automatic_run_0+0x78>
				if(i > 1) i = 0 ;
				update_mode(i++) ;
			}
			break;
		default:
			break;
 8000a48:	e138      	b.n	8000cbc <fsm_automatic_run_0+0x29c>
			HAL_GPIO_WritePin(RED1, Pin_RED1, SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	48a1      	ldr	r0, [pc, #644]	; (8000cd4 <fsm_automatic_run_0+0x2b4>)
 8000a50:	f001 fd13 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AMBER1, Pin_AMBER1, SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	489e      	ldr	r0, [pc, #632]	; (8000cd4 <fsm_automatic_run_0+0x2b4>)
 8000a5a:	f001 fd0e 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1, Pin_GREEN1, SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a64:	489b      	ldr	r0, [pc, #620]	; (8000cd4 <fsm_automatic_run_0+0x2b4>)
 8000a66:	f001 fd08 	bl	800247a <HAL_GPIO_WritePin>
			status_traffic_0 =  AUTO_RED ;
 8000a6a:	4b99      	ldr	r3, [pc, #612]	; (8000cd0 <fsm_automatic_run_0+0x2b0>)
 8000a6c:	221f      	movs	r2, #31
 8000a6e:	601a      	str	r2, [r3, #0]
			setTimer1(5000) ;	// thoi gian den do
 8000a70:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a74:	f000 ffb4 	bl	80019e0 <setTimer1>
			setTimer2(1000) ;
 8000a78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a7c:	f000 ff94 	bl	80019a8 <setTimer2>
			setTimer3(100) ;
 8000a80:	2064      	movs	r0, #100	; 0x64
 8000a82:	f000 ff75 	bl	8001970 <setTimer3>
			counter =  5 - 1 ;
 8000a86:	4b94      	ldr	r3, [pc, #592]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000a88:	2204      	movs	r2, #4
 8000a8a:	601a      	str	r2, [r3, #0]
			bufferMode(counter ) ;
 8000a8c:	4b92      	ldr	r3, [pc, #584]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 f94f 	bl	8001d34 <bufferMode>
			break;
 8000a96:	e118      	b.n	8000cca <fsm_automatic_run_0+0x2aa>
			HAL_GPIO_WritePin(RED1, Pin_RED1, RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2140      	movs	r1, #64	; 0x40
 8000a9c:	488d      	ldr	r0, [pc, #564]	; (8000cd4 <fsm_automatic_run_0+0x2b4>)
 8000a9e:	f001 fcec 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AMBER1, Pin_AMBER1, SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	488b      	ldr	r0, [pc, #556]	; (8000cd4 <fsm_automatic_run_0+0x2b4>)
 8000aa8:	f001 fce7 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1, Pin_GREEN1, SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab2:	4888      	ldr	r0, [pc, #544]	; (8000cd4 <fsm_automatic_run_0+0x2b4>)
 8000ab4:	f001 fce1 	bl	800247a <HAL_GPIO_WritePin>
			if(timer1_flag == 1){
 8000ab8:	4b88      	ldr	r3, [pc, #544]	; (8000cdc <fsm_automatic_run_0+0x2bc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d115      	bne.n	8000aec <fsm_automatic_run_0+0xcc>
				status_traffic_0 = AUTO_GREEN ; // chuyen sang den Xanh
 8000ac0:	4b83      	ldr	r3, [pc, #524]	; (8000cd0 <fsm_automatic_run_0+0x2b0>)
 8000ac2:	2221      	movs	r2, #33	; 0x21
 8000ac4:	601a      	str	r2, [r3, #0]
				setTimer1(3000);
 8000ac6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000aca:	f000 ff89 	bl	80019e0 <setTimer1>
				setTimer2(1000) ;
 8000ace:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad2:	f000 ff69 	bl	80019a8 <setTimer2>
				setTimer3(100) ;
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f000 ff4a 	bl	8001970 <setTimer3>
				counter =  3 - 1 ;
 8000adc:	4b7e      	ldr	r3, [pc, #504]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000ade:	2202      	movs	r2, #2
 8000ae0:	601a      	str	r2, [r3, #0]
				bufferMode(counter ) ;
 8000ae2:	4b7d      	ldr	r3, [pc, #500]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 f924 	bl	8001d34 <bufferMode>
			if(timer2_flag >= 1){
 8000aec:	4b7c      	ldr	r3, [pc, #496]	; (8000ce0 <fsm_automatic_run_0+0x2c0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dd14      	ble.n	8000b1e <fsm_automatic_run_0+0xfe>
				setTimer2(1000) ;
 8000af4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af8:	f000 ff56 	bl	80019a8 <setTimer2>
				counter-- ;
 8000afc:	4b76      	ldr	r3, [pc, #472]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	4a75      	ldr	r2, [pc, #468]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000b04:	6013      	str	r3, [r2, #0]
				if(counter < 0 ) counter = 0 ;
 8000b06:	4b74      	ldr	r3, [pc, #464]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	da02      	bge.n	8000b14 <fsm_automatic_run_0+0xf4>
 8000b0e:	4b72      	ldr	r3, [pc, #456]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
				bufferMode(counter ) ;
 8000b14:	4b70      	ldr	r3, [pc, #448]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 f90b 	bl	8001d34 <bufferMode>
			if(timer3_flag >= 1){
 8000b1e:	4b71      	ldr	r3, [pc, #452]	; (8000ce4 <fsm_automatic_run_0+0x2c4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f340 80cc 	ble.w	8000cc0 <fsm_automatic_run_0+0x2a0>
				setTimer3(500);
 8000b28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b2c:	f000 ff20 	bl	8001970 <setTimer3>
				if(i > 1) i = 0 ;
 8000b30:	4b6d      	ldr	r3, [pc, #436]	; (8000ce8 <fsm_automatic_run_0+0x2c8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	dd02      	ble.n	8000b3e <fsm_automatic_run_0+0x11e>
 8000b38:	4b6b      	ldr	r3, [pc, #428]	; (8000ce8 <fsm_automatic_run_0+0x2c8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
				update_mode(i++) ;
 8000b3e:	4b6a      	ldr	r3, [pc, #424]	; (8000ce8 <fsm_automatic_run_0+0x2c8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	4968      	ldr	r1, [pc, #416]	; (8000ce8 <fsm_automatic_run_0+0x2c8>)
 8000b46:	600a      	str	r2, [r1, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 f939 	bl	8001dc0 <update_mode>
			break;
 8000b4e:	e0b7      	b.n	8000cc0 <fsm_automatic_run_0+0x2a0>
			HAL_GPIO_WritePin(RED1, Pin_RED1, SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2140      	movs	r1, #64	; 0x40
 8000b54:	485f      	ldr	r0, [pc, #380]	; (8000cd4 <fsm_automatic_run_0+0x2b4>)
 8000b56:	f001 fc90 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AMBER1, Pin_AMBER1, RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	485d      	ldr	r0, [pc, #372]	; (8000cd4 <fsm_automatic_run_0+0x2b4>)
 8000b60:	f001 fc8b 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1, Pin_GREEN1, SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6a:	485a      	ldr	r0, [pc, #360]	; (8000cd4 <fsm_automatic_run_0+0x2b4>)
 8000b6c:	f001 fc85 	bl	800247a <HAL_GPIO_WritePin>
			if(timer1_flag == 1){
 8000b70:	4b5a      	ldr	r3, [pc, #360]	; (8000cdc <fsm_automatic_run_0+0x2bc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d115      	bne.n	8000ba4 <fsm_automatic_run_0+0x184>
				status_traffic_0 = AUTO_RED ; // chuyen sang den DO
 8000b78:	4b55      	ldr	r3, [pc, #340]	; (8000cd0 <fsm_automatic_run_0+0x2b0>)
 8000b7a:	221f      	movs	r2, #31
 8000b7c:	601a      	str	r2, [r3, #0]
				setTimer1(5000);
 8000b7e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b82:	f000 ff2d 	bl	80019e0 <setTimer1>
				setTimer2(1000) ;
 8000b86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b8a:	f000 ff0d 	bl	80019a8 <setTimer2>
				setTimer3(100) ;
 8000b8e:	2064      	movs	r0, #100	; 0x64
 8000b90:	f000 feee 	bl	8001970 <setTimer3>
				counter =  5 - 1 ;
 8000b94:	4b50      	ldr	r3, [pc, #320]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000b96:	2204      	movs	r2, #4
 8000b98:	601a      	str	r2, [r3, #0]
				bufferMode(counter ) ;
 8000b9a:	4b4f      	ldr	r3, [pc, #316]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 f8c8 	bl	8001d34 <bufferMode>
			if(timer2_flag >= 1){
 8000ba4:	4b4e      	ldr	r3, [pc, #312]	; (8000ce0 <fsm_automatic_run_0+0x2c0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	dd14      	ble.n	8000bd6 <fsm_automatic_run_0+0x1b6>
				setTimer2(1000) ;
 8000bac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bb0:	f000 fefa 	bl	80019a8 <setTimer2>
				counter-- ;
 8000bb4:	4b48      	ldr	r3, [pc, #288]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	4a47      	ldr	r2, [pc, #284]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000bbc:	6013      	str	r3, [r2, #0]
				if(counter < 0 ) counter = 0 ;
 8000bbe:	4b46      	ldr	r3, [pc, #280]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	da02      	bge.n	8000bcc <fsm_automatic_run_0+0x1ac>
 8000bc6:	4b44      	ldr	r3, [pc, #272]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
				bufferMode(counter ) ;
 8000bcc:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 f8af 	bl	8001d34 <bufferMode>
			if(timer3_flag >= 1){
 8000bd6:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <fsm_automatic_run_0+0x2c4>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	dd72      	ble.n	8000cc4 <fsm_automatic_run_0+0x2a4>
				setTimer3(500);
 8000bde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be2:	f000 fec5 	bl	8001970 <setTimer3>
				if(i > 1) i = 0 ;
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <fsm_automatic_run_0+0x2c8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	dd02      	ble.n	8000bf4 <fsm_automatic_run_0+0x1d4>
 8000bee:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <fsm_automatic_run_0+0x2c8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
				update_mode(i++) ;
 8000bf4:	4b3c      	ldr	r3, [pc, #240]	; (8000ce8 <fsm_automatic_run_0+0x2c8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	1c5a      	adds	r2, r3, #1
 8000bfa:	493b      	ldr	r1, [pc, #236]	; (8000ce8 <fsm_automatic_run_0+0x2c8>)
 8000bfc:	600a      	str	r2, [r1, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 f8de 	bl	8001dc0 <update_mode>
			break;
 8000c04:	e05e      	b.n	8000cc4 <fsm_automatic_run_0+0x2a4>
			HAL_GPIO_WritePin(RED1, Pin_RED1, SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2140      	movs	r1, #64	; 0x40
 8000c0a:	4832      	ldr	r0, [pc, #200]	; (8000cd4 <fsm_automatic_run_0+0x2b4>)
 8000c0c:	f001 fc35 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AMBER1, Pin_AMBER1, SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2180      	movs	r1, #128	; 0x80
 8000c14:	482f      	ldr	r0, [pc, #188]	; (8000cd4 <fsm_automatic_run_0+0x2b4>)
 8000c16:	f001 fc30 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1, Pin_GREEN1, RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c20:	482c      	ldr	r0, [pc, #176]	; (8000cd4 <fsm_automatic_run_0+0x2b4>)
 8000c22:	f001 fc2a 	bl	800247a <HAL_GPIO_WritePin>
			if(timer1_flag == 1){
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <fsm_automatic_run_0+0x2bc>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d115      	bne.n	8000c5a <fsm_automatic_run_0+0x23a>
				status_traffic_0 = AUTO_YELLOW ; // chuyen sang den VANG
 8000c2e:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <fsm_automatic_run_0+0x2b0>)
 8000c30:	2220      	movs	r2, #32
 8000c32:	601a      	str	r2, [r3, #0]
				setTimer1(2000);
 8000c34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c38:	f000 fed2 	bl	80019e0 <setTimer1>
				setTimer2(1000) ;
 8000c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c40:	f000 feb2 	bl	80019a8 <setTimer2>
				setTimer3(100) ;
 8000c44:	2064      	movs	r0, #100	; 0x64
 8000c46:	f000 fe93 	bl	8001970 <setTimer3>
				counter =  2 - 1 ;
 8000c4a:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	601a      	str	r2, [r3, #0]
				bufferMode(counter ) ;
 8000c50:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 f86d 	bl	8001d34 <bufferMode>
			if(timer2_flag >= 1){
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <fsm_automatic_run_0+0x2c0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	dd14      	ble.n	8000c8c <fsm_automatic_run_0+0x26c>
				setTimer2(1000) ;
 8000c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c66:	f000 fe9f 	bl	80019a8 <setTimer2>
				counter-- ;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000c72:	6013      	str	r3, [r2, #0]
				if(counter < 0 ) counter = 0 ;
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	da02      	bge.n	8000c82 <fsm_automatic_run_0+0x262>
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
				bufferMode(counter ) ;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <fsm_automatic_run_0+0x2b8>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 f854 	bl	8001d34 <bufferMode>
			if(timer3_flag >= 1){
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <fsm_automatic_run_0+0x2c4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	dd19      	ble.n	8000cc8 <fsm_automatic_run_0+0x2a8>
				setTimer3(500);
 8000c94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c98:	f000 fe6a 	bl	8001970 <setTimer3>
				if(i > 1) i = 0 ;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <fsm_automatic_run_0+0x2c8>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	dd02      	ble.n	8000caa <fsm_automatic_run_0+0x28a>
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <fsm_automatic_run_0+0x2c8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
				update_mode(i++) ;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <fsm_automatic_run_0+0x2c8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	490d      	ldr	r1, [pc, #52]	; (8000ce8 <fsm_automatic_run_0+0x2c8>)
 8000cb2:	600a      	str	r2, [r1, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 f883 	bl	8001dc0 <update_mode>
			break;
 8000cba:	e005      	b.n	8000cc8 <fsm_automatic_run_0+0x2a8>
			break;
 8000cbc:	bf00      	nop
 8000cbe:	e004      	b.n	8000cca <fsm_automatic_run_0+0x2aa>
			break;
 8000cc0:	bf00      	nop
 8000cc2:	e002      	b.n	8000cca <fsm_automatic_run_0+0x2aa>
			break;
 8000cc4:	bf00      	nop
 8000cc6:	e000      	b.n	8000cca <fsm_automatic_run_0+0x2aa>
			break;
 8000cc8:	bf00      	nop
	}
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000008c 	.word	0x2000008c
 8000cd4:	40010800 	.word	0x40010800
 8000cd8:	20000088 	.word	0x20000088
 8000cdc:	200000e8 	.word	0x200000e8
 8000ce0:	200000f0 	.word	0x200000f0
 8000ce4:	200000f8 	.word	0x200000f8
 8000ce8:	20000094 	.word	0x20000094

08000cec <fsm_automatic_run_1>:

void fsm_automatic_run_1(){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	switch (status_traffic_1) {
 8000cf0:	4bae      	ldr	r3, [pc, #696]	; (8000fac <fsm_automatic_run_1+0x2c0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b21      	cmp	r3, #33	; 0x21
 8000cf6:	f000 80f2 	beq.w	8000ede <fsm_automatic_run_1+0x1f2>
 8000cfa:	2b21      	cmp	r3, #33	; 0x21
 8000cfc:	f300 814c 	bgt.w	8000f98 <fsm_automatic_run_1+0x2ac>
 8000d00:	2b20      	cmp	r3, #32
 8000d02:	f000 808f 	beq.w	8000e24 <fsm_automatic_run_1+0x138>
 8000d06:	2b20      	cmp	r3, #32
 8000d08:	f300 8146 	bgt.w	8000f98 <fsm_automatic_run_1+0x2ac>
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <fsm_automatic_run_1+0x2a>
 8000d10:	2b1f      	cmp	r3, #31
 8000d12:	d029      	beq.n	8000d68 <fsm_automatic_run_1+0x7c>
				if(index1 > 1) index1 = 0 ;
				update_value(index1++) ;
			}
			break;
		default:
			break;
 8000d14:	e140      	b.n	8000f98 <fsm_automatic_run_1+0x2ac>
			HAL_GPIO_WritePin(RED2, Pin_RED2, SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1c:	48a4      	ldr	r0, [pc, #656]	; (8000fb0 <fsm_automatic_run_1+0x2c4>)
 8000d1e:	f001 fbac 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AMBER2, Pin_AMBER2, SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d28:	48a1      	ldr	r0, [pc, #644]	; (8000fb0 <fsm_automatic_run_1+0x2c4>)
 8000d2a:	f001 fba6 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2, Pin_GREEN2, SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d34:	489e      	ldr	r0, [pc, #632]	; (8000fb0 <fsm_automatic_run_1+0x2c4>)
 8000d36:	f001 fba0 	bl	800247a <HAL_GPIO_WritePin>
			status_traffic_1 = AUTO_GREEN;
 8000d3a:	4b9c      	ldr	r3, [pc, #624]	; (8000fac <fsm_automatic_run_1+0x2c0>)
 8000d3c:	2221      	movs	r2, #33	; 0x21
 8000d3e:	601a      	str	r2, [r3, #0]
			setTimer4(3000);
 8000d40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d44:	f000 fdf8 	bl	8001938 <setTimer4>
			setTimer5(1000);
 8000d48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d4c:	f000 fdd8 	bl	8001900 <setTimer5>
			setTimer6(100);
 8000d50:	2064      	movs	r0, #100	; 0x64
 8000d52:	f000 fdb9 	bl	80018c8 <setTimer6>
			value = 3 ;
 8000d56:	4b97      	ldr	r3, [pc, #604]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000d58:	2203      	movs	r2, #3
 8000d5a:	601a      	str	r2, [r3, #0]
			bufferValue(value);
 8000d5c:	4b95      	ldr	r3, [pc, #596]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 ffb9 	bl	8001cd8 <bufferValue>
			break;
 8000d66:	e11e      	b.n	8000fa6 <fsm_automatic_run_1+0x2ba>
			HAL_GPIO_WritePin(RED2, Pin_RED2, RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6e:	4890      	ldr	r0, [pc, #576]	; (8000fb0 <fsm_automatic_run_1+0x2c4>)
 8000d70:	f001 fb83 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AMBER2, Pin_AMBER2, SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7a:	488d      	ldr	r0, [pc, #564]	; (8000fb0 <fsm_automatic_run_1+0x2c4>)
 8000d7c:	f001 fb7d 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2, Pin_GREEN2, SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d86:	488a      	ldr	r0, [pc, #552]	; (8000fb0 <fsm_automatic_run_1+0x2c4>)
 8000d88:	f001 fb77 	bl	800247a <HAL_GPIO_WritePin>
			if(timer4_flag >= 1){
 8000d8c:	4b8a      	ldr	r3, [pc, #552]	; (8000fb8 <fsm_automatic_run_1+0x2cc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	dd15      	ble.n	8000dc0 <fsm_automatic_run_1+0xd4>
				status_traffic_1 = AUTO_GREEN; // chuyen sang den xanh
 8000d94:	4b85      	ldr	r3, [pc, #532]	; (8000fac <fsm_automatic_run_1+0x2c0>)
 8000d96:	2221      	movs	r2, #33	; 0x21
 8000d98:	601a      	str	r2, [r3, #0]
				setTimer4(3000); // thoi gian den xanh
 8000d9a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d9e:	f000 fdcb 	bl	8001938 <setTimer4>
				setTimer5(1000);
 8000da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da6:	f000 fdab 	bl	8001900 <setTimer5>
				setTimer6(100);
 8000daa:	2064      	movs	r0, #100	; 0x64
 8000dac:	f000 fd8c 	bl	80018c8 <setTimer6>
				value = 3 ;
 8000db0:	4b80      	ldr	r3, [pc, #512]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000db2:	2203      	movs	r2, #3
 8000db4:	601a      	str	r2, [r3, #0]
				bufferValue(value);
 8000db6:	4b7f      	ldr	r3, [pc, #508]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 ff8c 	bl	8001cd8 <bufferValue>
			if(timer5_flag >= 1){
 8000dc0:	4b7e      	ldr	r3, [pc, #504]	; (8000fbc <fsm_automatic_run_1+0x2d0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	dd14      	ble.n	8000df2 <fsm_automatic_run_1+0x106>
				setTimer5(1000) ;
 8000dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dcc:	f000 fd98 	bl	8001900 <setTimer5>
				value--;
 8000dd0:	4b78      	ldr	r3, [pc, #480]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	4a77      	ldr	r2, [pc, #476]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000dd8:	6013      	str	r3, [r2, #0]
				if(value < 0 ) value = 0 ;
 8000dda:	4b76      	ldr	r3, [pc, #472]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	da02      	bge.n	8000de8 <fsm_automatic_run_1+0xfc>
 8000de2:	4b74      	ldr	r3, [pc, #464]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
				bufferValue(value);
 8000de8:	4b72      	ldr	r3, [pc, #456]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 ff73 	bl	8001cd8 <bufferValue>
			if(timer6_flag >= 1){
 8000df2:	4b73      	ldr	r3, [pc, #460]	; (8000fc0 <fsm_automatic_run_1+0x2d4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f340 80d0 	ble.w	8000f9c <fsm_automatic_run_1+0x2b0>
				setTimer6(500) ;
 8000dfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e00:	f000 fd62 	bl	80018c8 <setTimer6>
				if(index1 > 1) index1 = 0 ;
 8000e04:	4b6f      	ldr	r3, [pc, #444]	; (8000fc4 <fsm_automatic_run_1+0x2d8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	dd02      	ble.n	8000e12 <fsm_automatic_run_1+0x126>
 8000e0c:	4b6d      	ldr	r3, [pc, #436]	; (8000fc4 <fsm_automatic_run_1+0x2d8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
				update_value(index1++) ;
 8000e12:	4b6c      	ldr	r3, [pc, #432]	; (8000fc4 <fsm_automatic_run_1+0x2d8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	496a      	ldr	r1, [pc, #424]	; (8000fc4 <fsm_automatic_run_1+0x2d8>)
 8000e1a:	600a      	str	r2, [r1, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 ff9b 	bl	8001d58 <update_value>
			break;
 8000e22:	e0bb      	b.n	8000f9c <fsm_automatic_run_1+0x2b0>
			HAL_GPIO_WritePin(RED2, Pin_RED2, SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2a:	4861      	ldr	r0, [pc, #388]	; (8000fb0 <fsm_automatic_run_1+0x2c4>)
 8000e2c:	f001 fb25 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AMBER2, Pin_AMBER2, RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e36:	485e      	ldr	r0, [pc, #376]	; (8000fb0 <fsm_automatic_run_1+0x2c4>)
 8000e38:	f001 fb1f 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2, Pin_GREEN2, SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e42:	485b      	ldr	r0, [pc, #364]	; (8000fb0 <fsm_automatic_run_1+0x2c4>)
 8000e44:	f001 fb19 	bl	800247a <HAL_GPIO_WritePin>
			if(timer4_flag == 1){
 8000e48:	4b5b      	ldr	r3, [pc, #364]	; (8000fb8 <fsm_automatic_run_1+0x2cc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d115      	bne.n	8000e7c <fsm_automatic_run_1+0x190>
				status_traffic_1 = AUTO_RED ; // chuyen sang den do
 8000e50:	4b56      	ldr	r3, [pc, #344]	; (8000fac <fsm_automatic_run_1+0x2c0>)
 8000e52:	221f      	movs	r2, #31
 8000e54:	601a      	str	r2, [r3, #0]
				setTimer4(5000); // thoi gian  do
 8000e56:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e5a:	f000 fd6d 	bl	8001938 <setTimer4>
				setTimer5(1000);
 8000e5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e62:	f000 fd4d 	bl	8001900 <setTimer5>
				setTimer6(100);
 8000e66:	2064      	movs	r0, #100	; 0x64
 8000e68:	f000 fd2e 	bl	80018c8 <setTimer6>
				value = 5 ;
 8000e6c:	4b51      	ldr	r3, [pc, #324]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000e6e:	2205      	movs	r2, #5
 8000e70:	601a      	str	r2, [r3, #0]
				bufferValue(value);
 8000e72:	4b50      	ldr	r3, [pc, #320]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 ff2e 	bl	8001cd8 <bufferValue>
			if(timer5_flag >= 1){
 8000e7c:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <fsm_automatic_run_1+0x2d0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	dd14      	ble.n	8000eae <fsm_automatic_run_1+0x1c2>
				setTimer5(1000) ;
 8000e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e88:	f000 fd3a 	bl	8001900 <setTimer5>
				value--;
 8000e8c:	4b49      	ldr	r3, [pc, #292]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	4a48      	ldr	r2, [pc, #288]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000e94:	6013      	str	r3, [r2, #0]
				if(value < 0 ) value = 0 ;
 8000e96:	4b47      	ldr	r3, [pc, #284]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da02      	bge.n	8000ea4 <fsm_automatic_run_1+0x1b8>
 8000e9e:	4b45      	ldr	r3, [pc, #276]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
				bufferValue(value);
 8000ea4:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 ff15 	bl	8001cd8 <bufferValue>
			if(timer6_flag >= 1){
 8000eae:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <fsm_automatic_run_1+0x2d4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	dd74      	ble.n	8000fa0 <fsm_automatic_run_1+0x2b4>
				setTimer6(500) ;
 8000eb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eba:	f000 fd05 	bl	80018c8 <setTimer6>
				if(index1 > 1) index1 = 0 ;
 8000ebe:	4b41      	ldr	r3, [pc, #260]	; (8000fc4 <fsm_automatic_run_1+0x2d8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	dd02      	ble.n	8000ecc <fsm_automatic_run_1+0x1e0>
 8000ec6:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <fsm_automatic_run_1+0x2d8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
				update_value(index1++) ;
 8000ecc:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <fsm_automatic_run_1+0x2d8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	1c5a      	adds	r2, r3, #1
 8000ed2:	493c      	ldr	r1, [pc, #240]	; (8000fc4 <fsm_automatic_run_1+0x2d8>)
 8000ed4:	600a      	str	r2, [r1, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 ff3e 	bl	8001d58 <update_value>
			break;
 8000edc:	e060      	b.n	8000fa0 <fsm_automatic_run_1+0x2b4>
			HAL_GPIO_WritePin(RED2, Pin_RED2, SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee4:	4832      	ldr	r0, [pc, #200]	; (8000fb0 <fsm_automatic_run_1+0x2c4>)
 8000ee6:	f001 fac8 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AMBER2, Pin_AMBER2, SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef0:	482f      	ldr	r0, [pc, #188]	; (8000fb0 <fsm_automatic_run_1+0x2c4>)
 8000ef2:	f001 fac2 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2, Pin_GREEN2, RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efc:	482c      	ldr	r0, [pc, #176]	; (8000fb0 <fsm_automatic_run_1+0x2c4>)
 8000efe:	f001 fabc 	bl	800247a <HAL_GPIO_WritePin>
			if(timer4_flag == 1){
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <fsm_automatic_run_1+0x2cc>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d115      	bne.n	8000f36 <fsm_automatic_run_1+0x24a>
				status_traffic_1 = AUTO_YELLOW; // chuyen sang den VANG
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <fsm_automatic_run_1+0x2c0>)
 8000f0c:	2220      	movs	r2, #32
 8000f0e:	601a      	str	r2, [r3, #0]
				setTimer4(2000); // thoi gian den VANG
 8000f10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f14:	f000 fd10 	bl	8001938 <setTimer4>
				setTimer5(1000);
 8000f18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f1c:	f000 fcf0 	bl	8001900 <setTimer5>
				setTimer6(100);
 8000f20:	2064      	movs	r0, #100	; 0x64
 8000f22:	f000 fcd1 	bl	80018c8 <setTimer6>
				value = 2 ;
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000f28:	2202      	movs	r2, #2
 8000f2a:	601a      	str	r2, [r3, #0]
				bufferValue(value);
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 fed1 	bl	8001cd8 <bufferValue>
			if(timer5_flag >= 1){
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <fsm_automatic_run_1+0x2d0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	dd14      	ble.n	8000f68 <fsm_automatic_run_1+0x27c>
				setTimer5(1000) ;
 8000f3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f42:	f000 fcdd 	bl	8001900 <setTimer5>
				value--;
 8000f46:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000f4e:	6013      	str	r3, [r2, #0]
				if(value < 0 ) value = 0 ;
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	da02      	bge.n	8000f5e <fsm_automatic_run_1+0x272>
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
				bufferValue(value);
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <fsm_automatic_run_1+0x2c8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 feb8 	bl	8001cd8 <bufferValue>
			if(timer6_flag >= 1){
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <fsm_automatic_run_1+0x2d4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	dd19      	ble.n	8000fa4 <fsm_automatic_run_1+0x2b8>
				setTimer6(500) ;
 8000f70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f74:	f000 fca8 	bl	80018c8 <setTimer6>
				if(index1 > 1) index1 = 0 ;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <fsm_automatic_run_1+0x2d8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	dd02      	ble.n	8000f86 <fsm_automatic_run_1+0x29a>
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <fsm_automatic_run_1+0x2d8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
				update_value(index1++) ;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <fsm_automatic_run_1+0x2d8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <fsm_automatic_run_1+0x2d8>)
 8000f8e:	600a      	str	r2, [r1, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fee1 	bl	8001d58 <update_value>
			break;
 8000f96:	e005      	b.n	8000fa4 <fsm_automatic_run_1+0x2b8>
			break;
 8000f98:	bf00      	nop
 8000f9a:	e004      	b.n	8000fa6 <fsm_automatic_run_1+0x2ba>
			break;
 8000f9c:	bf00      	nop
 8000f9e:	e002      	b.n	8000fa6 <fsm_automatic_run_1+0x2ba>
			break;
 8000fa0:	bf00      	nop
 8000fa2:	e000      	b.n	8000fa6 <fsm_automatic_run_1+0x2ba>
			break;
 8000fa4:	bf00      	nop
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000090 	.word	0x20000090
 8000fb0:	40010800 	.word	0x40010800
 8000fb4:	20000080 	.word	0x20000080
 8000fb8:	20000100 	.word	0x20000100
 8000fbc:	20000108 	.word	0x20000108
 8000fc0:	20000110 	.word	0x20000110
 8000fc4:	2000007c 	.word	0x2000007c

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fcc:	f000 ff52 	bl	8001e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd0:	f000 f834 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd4:	f000 f8ba 	bl	800114c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fd8:	f000 f86c 	bl	80010b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fdc:	4814      	ldr	r0, [pc, #80]	; (8001030 <main+0x68>)
 8000fde:	f001 feab 	bl	8002d38 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET) ;
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	4813      	ldr	r0, [pc, #76]	; (8001034 <main+0x6c>)
 8000fe8:	f001 fa47 	bl	800247a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET) ;
 8000fec:	2200      	movs	r2, #0
 8000fee:	2104      	movs	r1, #4
 8000ff0:	4810      	ldr	r0, [pc, #64]	; (8001034 <main+0x6c>)
 8000ff2:	f001 fa42 	bl	800247a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET) ;
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <main+0x6c>)
 8000ffc:	f001 fa3d 	bl	800247a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET) ;
 8001000:	2200      	movs	r2, #0
 8001002:	2110      	movs	r1, #16
 8001004:	480b      	ldr	r0, [pc, #44]	; (8001034 <main+0x6c>)
 8001006:	f001 fa38 	bl	800247a <HAL_GPIO_WritePin>
  setTimer0(1000) ;
 800100a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100e:	f000 fbeb 	bl	80017e8 <setTimer0>
  while (1)
  {
	  if(timer0_flag >= 1) {
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <main+0x70>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	dd07      	ble.n	800102a <main+0x62>
		  setTimer0(1000) ;
 800101a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800101e:	f000 fbe3 	bl	80017e8 <setTimer0>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin) ;
 8001022:	2120      	movs	r1, #32
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <main+0x6c>)
 8001026:	f001 fa40 	bl	80024aa <HAL_GPIO_TogglePin>
	  }
	  selection();
 800102a:	f000 f927 	bl	800127c <selection>
	  if(timer0_flag >= 1) {
 800102e:	e7f0      	b.n	8001012 <main+0x4a>
 8001030:	2000009c 	.word	0x2000009c
 8001034:	40010800 	.word	0x40010800
 8001038:	20000138 	.word	0x20000138

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b090      	sub	sp, #64	; 0x40
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0318 	add.w	r3, r7, #24
 8001046:	2228      	movs	r2, #40	; 0x28
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fa0c 	bl	8003468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001062:	2301      	movs	r3, #1
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001066:	2310      	movs	r3, #16
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800106a:	2300      	movs	r3, #0
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106e:	f107 0318 	add.w	r3, r7, #24
 8001072:	4618      	mov	r0, r3
 8001074:	f001 fa32 	bl	80024dc <HAL_RCC_OscConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800107e:	f000 f8ef 	bl	8001260 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f001 fca0 	bl	80029e0 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010a6:	f000 f8db 	bl	8001260 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3740      	adds	r7, #64	; 0x40
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	463b      	mov	r3, r7
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MX_TIM2_Init+0x94>)
 80010d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <MX_TIM2_Init+0x94>)
 80010da:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <MX_TIM2_Init+0x94>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_TIM2_Init+0x94>)
 80010e8:	2209      	movs	r2, #9
 80010ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_TIM2_Init+0x94>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_TIM2_Init+0x94>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f8:	4813      	ldr	r0, [pc, #76]	; (8001148 <MX_TIM2_Init+0x94>)
 80010fa:	f001 fdcd 	bl	8002c98 <HAL_TIM_Base_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001104:	f000 f8ac 	bl	8001260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	4619      	mov	r1, r3
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <MX_TIM2_Init+0x94>)
 8001116:	f001 ff63 	bl	8002fe0 <HAL_TIM_ConfigClockSource>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001120:	f000 f89e 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800112c:	463b      	mov	r3, r7
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_TIM2_Init+0x94>)
 8001132:	f002 f92f 	bl	8003394 <HAL_TIMEx_MasterConfigSynchronization>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800113c:	f000 f890 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000009c 	.word	0x2000009c

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001160:	4b35      	ldr	r3, [pc, #212]	; (8001238 <MX_GPIO_Init+0xec>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a34      	ldr	r2, [pc, #208]	; (8001238 <MX_GPIO_Init+0xec>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <MX_GPIO_Init+0xec>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <MX_GPIO_Init+0xec>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a2e      	ldr	r2, [pc, #184]	; (8001238 <MX_GPIO_Init+0xec>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <MX_GPIO_Init+0xec>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <MX_GPIO_Init+0xec>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a28      	ldr	r2, [pc, #160]	; (8001238 <MX_GPIO_Init+0xec>)
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <MX_GPIO_Init+0xec>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80011a8:	2200      	movs	r2, #0
 80011aa:	f640 71fe 	movw	r1, #4094	; 0xffe
 80011ae:	4823      	ldr	r0, [pc, #140]	; (800123c <MX_GPIO_Init+0xf0>)
 80011b0:	f001 f963 	bl	800247a <HAL_GPIO_WritePin>
                          |LED_RED_Pin|R1_Pin|A1_Pin|G1_Pin
                          |R2_Pin|A2_Pin|G2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_1_Pin
 80011b4:	2200      	movs	r2, #0
 80011b6:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80011ba:	4821      	ldr	r0, [pc, #132]	; (8001240 <MX_GPIO_Init+0xf4>)
 80011bc:	f001 f95d 	bl	800247a <HAL_GPIO_WritePin>
                          |SEG4_1_Pin|SEG5_1_Pin|SEG6_1_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG0_1_Pin
                          |SEG1_1_Pin|SEG2_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Mode_controller_Pin count_value_Pin */
  GPIO_InitStruct.Pin = Mode_controller_Pin|count_value_Pin;
 80011c0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80011c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4619      	mov	r1, r3
 80011d4:	481b      	ldr	r0, [pc, #108]	; (8001244 <MX_GPIO_Init+0xf8>)
 80011d6:	f000 ffbd 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED_RED_Pin R1_Pin A1_Pin G1_Pin
                           R2_Pin A2_Pin G2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80011da:	f640 73fe 	movw	r3, #4094	; 0xffe
 80011de:	613b      	str	r3, [r7, #16]
                          |LED_RED_Pin|R1_Pin|A1_Pin|G1_Pin
                          |R2_Pin|A2_Pin|G2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <MX_GPIO_Init+0xf0>)
 80011f4:	f000 ffae 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_1_Pin
                           SEG4_1_Pin SEG5_1_Pin SEG6_1_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG0_1_Pin
                           SEG1_1_Pin SEG2_1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_1_Pin
 80011f8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80011fc:	613b      	str	r3, [r7, #16]
                          |SEG4_1_Pin|SEG5_1_Pin|SEG6_1_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG0_1_Pin
                          |SEG1_1_Pin|SEG2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2302      	movs	r3, #2
 8001208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4619      	mov	r1, r3
 8001210:	480b      	ldr	r0, [pc, #44]	; (8001240 <MX_GPIO_Init+0xf4>)
 8001212:	f000 ff9f 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : set_value_Pin */
  GPIO_InitStruct.Pin = set_value_Pin;
 8001216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001220:	2301      	movs	r3, #1
 8001222:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(set_value_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_GPIO_Init+0xf4>)
 800122c:	f000 ff92 	bl	8002154 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40021000 	.word	0x40021000
 800123c:	40010800 	.word	0x40010800
 8001240:	40010c00 	.word	0x40010c00
 8001244:	40011000 	.word	0x40011000

08001248 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001250:	f000 fbe2 	bl	8001a18 <timerRun>
	getKeyInput();
 8001254:	f7fe ffb4 	bl	80001c0 <getKeyInput>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001268:	e7fe      	b.n	8001268 <Error_Handler+0x8>

0800126a <mode_1>:
#include "mode_selection.h"

// timer 2, tan so quet cua led REDs trong mode 2 3 4
// timer 3 , tan so quet cua led 7 doan

void mode_1(){
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
	fsm_automatic_run_0();
 800126e:	f7ff fbd7 	bl	8000a20 <fsm_automatic_run_0>
	fsm_automatic_run_1();
 8001272:	f7ff fd3b 	bl	8000cec <fsm_automatic_run_1>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <selection>:


void selection(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	switch (status) {
 8001280:	4b93      	ldr	r3, [pc, #588]	; (80014d0 <selection+0x254>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b03      	cmp	r3, #3
 8001286:	f200 82a3 	bhi.w	80017d0 <selection+0x554>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <selection+0x14>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012a1 	.word	0x080012a1
 8001294:	0800133b 	.word	0x0800133b
 8001298:	080014fd 	.word	0x080014fd
 800129c:	08001693 	.word	0x08001693
		case 0:
			mode_1();
 80012a0:	f7ff ffe3 	bl	800126a <mode_1>
			if(is_button_Pressed(0)){
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7fe ff51 	bl	800014c <is_button_Pressed>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 8291 	beq.w	80017d4 <selection+0x558>
				status = 1 ;
 80012b2:	4b87      	ldr	r3, [pc, #540]	; (80014d0 <selection+0x254>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
				value = 0 ;
 80012b8:	4b86      	ldr	r3, [pc, #536]	; (80014d4 <selection+0x258>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
				counter = 1 ;
 80012be:	4b86      	ldr	r3, [pc, #536]	; (80014d8 <selection+0x25c>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
				i = 0 ;
 80012c4:	4b85      	ldr	r3, [pc, #532]	; (80014dc <selection+0x260>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
				i1 = 0 ;
 80012ca:	4b85      	ldr	r3, [pc, #532]	; (80014e0 <selection+0x264>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
				setTimer7(500) ;
 80012d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d4:	f000 fadc 	bl	8001890 <setTimer7>
				setTimer9(500) ;
 80012d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012dc:	f000 faa0 	bl	8001820 <setTimer9>
				bufferValue(value) ;
 80012e0:	4b7c      	ldr	r3, [pc, #496]	; (80014d4 <selection+0x258>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fcf7 	bl	8001cd8 <bufferValue>
				bufferMode(status) ;
 80012ea:	4b79      	ldr	r3, [pc, #484]	; (80014d0 <selection+0x254>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fd20 	bl	8001d34 <bufferMode>
				// turn on LED RED and turn off another LEDs
				HAL_GPIO_WritePin(RED1, Pin_RED1, RESET) ;
 80012f4:	2200      	movs	r2, #0
 80012f6:	2140      	movs	r1, #64	; 0x40
 80012f8:	487a      	ldr	r0, [pc, #488]	; (80014e4 <selection+0x268>)
 80012fa:	f001 f8be 	bl	800247a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RED2, Pin_RED2, RESET) ;
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001304:	4877      	ldr	r0, [pc, #476]	; (80014e4 <selection+0x268>)
 8001306:	f001 f8b8 	bl	800247a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AMBER1, Pin_AMBER1, SET) ;
 800130a:	2201      	movs	r2, #1
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	4875      	ldr	r0, [pc, #468]	; (80014e4 <selection+0x268>)
 8001310:	f001 f8b3 	bl	800247a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AMBER2, Pin_AMBER2, SET) ;
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800131a:	4872      	ldr	r0, [pc, #456]	; (80014e4 <selection+0x268>)
 800131c:	f001 f8ad 	bl	800247a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN1, Pin_GREEN1, SET) ;
 8001320:	2201      	movs	r2, #1
 8001322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001326:	486f      	ldr	r0, [pc, #444]	; (80014e4 <selection+0x268>)
 8001328:	f001 f8a7 	bl	800247a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN2, Pin_GREEN2, SET) ;
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001332:	486c      	ldr	r0, [pc, #432]	; (80014e4 <selection+0x268>)
 8001334:	f001 f8a1 	bl	800247a <HAL_GPIO_WritePin>
			}
			break;
 8001338:	e24c      	b.n	80017d4 <selection+0x558>
		case 1:

			// led 7SEGs
			if(timer9_flag >= 1){
 800133a:	4b6b      	ldr	r3, [pc, #428]	; (80014e8 <selection+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	dd21      	ble.n	8001386 <selection+0x10a>
				setTimer9(500);
 8001342:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001346:	f000 fa6b 	bl	8001820 <setTimer9>
				if(i > 1) i = 0 ;
 800134a:	4b64      	ldr	r3, [pc, #400]	; (80014dc <selection+0x260>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	dd02      	ble.n	8001358 <selection+0xdc>
 8001352:	4b62      	ldr	r3, [pc, #392]	; (80014dc <selection+0x260>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
				update_mode(i++) ;
 8001358:	4b60      	ldr	r3, [pc, #384]	; (80014dc <selection+0x260>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	495f      	ldr	r1, [pc, #380]	; (80014dc <selection+0x260>)
 8001360:	600a      	str	r2, [r1, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fd2c 	bl	8001dc0 <update_mode>
				if(i1 > 1) i1 = 0 ;
 8001368:	4b5d      	ldr	r3, [pc, #372]	; (80014e0 <selection+0x264>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	dd02      	ble.n	8001376 <selection+0xfa>
 8001370:	4b5b      	ldr	r3, [pc, #364]	; (80014e0 <selection+0x264>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
				update_value(i1++) ;
 8001376:	4b5a      	ldr	r3, [pc, #360]	; (80014e0 <selection+0x264>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	4958      	ldr	r1, [pc, #352]	; (80014e0 <selection+0x264>)
 800137e:	600a      	str	r2, [r1, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fce9 	bl	8001d58 <update_value>
			}
			if(timer8_flag >= 1){
 8001386:	4b59      	ldr	r3, [pc, #356]	; (80014ec <selection+0x270>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	dd0d      	ble.n	80013aa <selection+0x12e>
		//			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
				setTimer8(1000);
 800138e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001392:	f000 fa61 	bl	8001858 <setTimer8>
				counter--;
 8001396:	4b50      	ldr	r3, [pc, #320]	; (80014d8 <selection+0x25c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3b01      	subs	r3, #1
 800139c:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <selection+0x25c>)
 800139e:	6013      	str	r3, [r2, #0]
				bufferValue(counter);
 80013a0:	4b4d      	ldr	r3, [pc, #308]	; (80014d8 <selection+0x25c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fc97 	bl	8001cd8 <bufferValue>
			}

			// toggle led REDs
			if(timer7_flag >= 1){
 80013aa:	4b51      	ldr	r3, [pc, #324]	; (80014f0 <selection+0x274>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	dd0c      	ble.n	80013cc <selection+0x150>
				setTimer7(500);
 80013b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013b6:	f000 fa6b 	bl	8001890 <setTimer7>
				HAL_GPIO_TogglePin(RED1, Pin_RED1) ;
 80013ba:	2140      	movs	r1, #64	; 0x40
 80013bc:	4849      	ldr	r0, [pc, #292]	; (80014e4 <selection+0x268>)
 80013be:	f001 f874 	bl	80024aa <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(RED2, Pin_RED2) ;
 80013c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c6:	4847      	ldr	r0, [pc, #284]	; (80014e4 <selection+0x268>)
 80013c8:	f001 f86f 	bl	80024aa <HAL_GPIO_TogglePin>
			}
			// increase a value of counter
			if(is_button_Pressed(1)){
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7fe febd 	bl	800014c <is_button_Pressed>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d010      	beq.n	80013fa <selection+0x17e>
				  value++;
 80013d8:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <selection+0x258>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	4a3d      	ldr	r2, [pc, #244]	; (80014d4 <selection+0x258>)
 80013e0:	6013      	str	r3, [r2, #0]
				  if(value > 99) value = 0;
 80013e2:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <selection+0x258>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b63      	cmp	r3, #99	; 0x63
 80013e8:	dd02      	ble.n	80013f0 <selection+0x174>
 80013ea:	4b3a      	ldr	r3, [pc, #232]	; (80014d4 <selection+0x258>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
				  bufferValue(value) ;
 80013f0:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <selection+0x258>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fc6f 	bl	8001cd8 <bufferValue>
			}
			// set a value of counter then decreased value of counter
			if(is_button_Pressed(2)){
 80013fa:	2002      	movs	r0, #2
 80013fc:	f7fe fea6 	bl	800014c <is_button_Pressed>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d007      	beq.n	8001416 <selection+0x19a>
				counter = value ;
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <selection+0x258>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <selection+0x25c>)
 800140c:	6013      	str	r3, [r2, #0]
				setTimer8(1000) ;
 800140e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001412:	f000 fa21 	bl	8001858 <setTimer8>
			}
			// chuyen trang thai
			if(is_button_Pressed(0)){
 8001416:	2000      	movs	r0, #0
 8001418:	f7fe fe98 	bl	800014c <is_button_Pressed>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d042      	beq.n	80014a8 <selection+0x22c>
				status = 2  ;
 8001422:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <selection+0x254>)
 8001424:	2202      	movs	r2, #2
 8001426:	601a      	str	r2, [r3, #0]
				value = 0 ;
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <selection+0x258>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
				counter = 1 ;
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <selection+0x25c>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]
				i = 0 ;
 8001434:	4b29      	ldr	r3, [pc, #164]	; (80014dc <selection+0x260>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
				i1 = 0 ;
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <selection+0x264>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
				setTimer7(500) ;
 8001440:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001444:	f000 fa24 	bl	8001890 <setTimer7>
				setTimer9(500) ;
 8001448:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800144c:	f000 f9e8 	bl	8001820 <setTimer9>
				bufferValue(value) ;
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <selection+0x258>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fc3f 	bl	8001cd8 <bufferValue>
				bufferMode(status) ;
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <selection+0x254>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 fc68 	bl	8001d34 <bufferMode>
				HAL_GPIO_WritePin(RED1, Pin_RED1, SET) ;
 8001464:	2201      	movs	r2, #1
 8001466:	2140      	movs	r1, #64	; 0x40
 8001468:	481e      	ldr	r0, [pc, #120]	; (80014e4 <selection+0x268>)
 800146a:	f001 f806 	bl	800247a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RED2, Pin_RED2, SET) ;
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001474:	481b      	ldr	r0, [pc, #108]	; (80014e4 <selection+0x268>)
 8001476:	f001 f800 	bl	800247a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AMBER1, Pin_AMBER1, RESET) ;
 800147a:	2200      	movs	r2, #0
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	4819      	ldr	r0, [pc, #100]	; (80014e4 <selection+0x268>)
 8001480:	f000 fffb 	bl	800247a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AMBER2, Pin_AMBER2, RESET) ;
 8001484:	2200      	movs	r2, #0
 8001486:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <selection+0x268>)
 800148c:	f000 fff5 	bl	800247a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN1, Pin_GREEN1, SET) ;
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001496:	4813      	ldr	r0, [pc, #76]	; (80014e4 <selection+0x268>)
 8001498:	f000 ffef 	bl	800247a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN2, Pin_GREEN2, SET) ;
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a2:	4810      	ldr	r0, [pc, #64]	; (80014e4 <selection+0x268>)
 80014a4:	f000 ffe9 	bl	800247a <HAL_GPIO_WritePin>
			}

			if(counter <= 0 ){
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <selection+0x25c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f300 8193 	bgt.w	80017d8 <selection+0x55c>
				status = 0 ;
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <selection+0x254>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
				status_traffic_0 = INIT;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <selection+0x278>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
				status_traffic_1 = INIT;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <selection+0x27c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
				bufferMode(status);
 80014c4:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <selection+0x254>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fc33 	bl	8001d34 <bufferMode>
			}

			break;
 80014ce:	e183      	b.n	80017d8 <selection+0x55c>
 80014d0:	20000084 	.word	0x20000084
 80014d4:	20000080 	.word	0x20000080
 80014d8:	20000088 	.word	0x20000088
 80014dc:	20000094 	.word	0x20000094
 80014e0:	20000098 	.word	0x20000098
 80014e4:	40010800 	.word	0x40010800
 80014e8:	20000128 	.word	0x20000128
 80014ec:	20000120 	.word	0x20000120
 80014f0:	20000118 	.word	0x20000118
 80014f4:	2000008c 	.word	0x2000008c
 80014f8:	20000090 	.word	0x20000090

	case 2:
		// led 7SEGs
		if(timer9_flag >= 1){
 80014fc:	4ba9      	ldr	r3, [pc, #676]	; (80017a4 <selection+0x528>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	dd21      	ble.n	8001548 <selection+0x2cc>
			setTimer9(500);
 8001504:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001508:	f000 f98a 	bl	8001820 <setTimer9>
			if(i > 1) i = 0 ;
 800150c:	4ba6      	ldr	r3, [pc, #664]	; (80017a8 <selection+0x52c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	dd02      	ble.n	800151a <selection+0x29e>
 8001514:	4ba4      	ldr	r3, [pc, #656]	; (80017a8 <selection+0x52c>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
			update_mode(i++) ;
 800151a:	4ba3      	ldr	r3, [pc, #652]	; (80017a8 <selection+0x52c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	49a1      	ldr	r1, [pc, #644]	; (80017a8 <selection+0x52c>)
 8001522:	600a      	str	r2, [r1, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fc4b 	bl	8001dc0 <update_mode>
			if(i1 > 1) i1 = 0 ;
 800152a:	4ba0      	ldr	r3, [pc, #640]	; (80017ac <selection+0x530>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b01      	cmp	r3, #1
 8001530:	dd02      	ble.n	8001538 <selection+0x2bc>
 8001532:	4b9e      	ldr	r3, [pc, #632]	; (80017ac <selection+0x530>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
			update_value(i1++) ;
 8001538:	4b9c      	ldr	r3, [pc, #624]	; (80017ac <selection+0x530>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	499b      	ldr	r1, [pc, #620]	; (80017ac <selection+0x530>)
 8001540:	600a      	str	r2, [r1, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fc08 	bl	8001d58 <update_value>
		}
		if(timer8_flag >= 1){
 8001548:	4b99      	ldr	r3, [pc, #612]	; (80017b0 <selection+0x534>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	dd0d      	ble.n	800156c <selection+0x2f0>
			setTimer8(1000);
 8001550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001554:	f000 f980 	bl	8001858 <setTimer8>
			counter--;
 8001558:	4b96      	ldr	r3, [pc, #600]	; (80017b4 <selection+0x538>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3b01      	subs	r3, #1
 800155e:	4a95      	ldr	r2, [pc, #596]	; (80017b4 <selection+0x538>)
 8001560:	6013      	str	r3, [r2, #0]
			bufferValue(counter);
 8001562:	4b94      	ldr	r3, [pc, #592]	; (80017b4 <selection+0x538>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fbb6 	bl	8001cd8 <bufferValue>
		}

		// toggle led REDs
		if(timer7_flag >= 1){
 800156c:	4b92      	ldr	r3, [pc, #584]	; (80017b8 <selection+0x53c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	dd0c      	ble.n	800158e <selection+0x312>
			setTimer7(500);
 8001574:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001578:	f000 f98a 	bl	8001890 <setTimer7>
			HAL_GPIO_TogglePin(AMBER1, Pin_AMBER1) ;
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	488f      	ldr	r0, [pc, #572]	; (80017bc <selection+0x540>)
 8001580:	f000 ff93 	bl	80024aa <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(AMBER2, Pin_AMBER2) ;
 8001584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001588:	488c      	ldr	r0, [pc, #560]	; (80017bc <selection+0x540>)
 800158a:	f000 ff8e 	bl	80024aa <HAL_GPIO_TogglePin>
		}
		// increase a value of counter
		if(is_button_Pressed(1)){
 800158e:	2001      	movs	r0, #1
 8001590:	f7fe fddc 	bl	800014c <is_button_Pressed>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d010      	beq.n	80015bc <selection+0x340>
			  value++;
 800159a:	4b89      	ldr	r3, [pc, #548]	; (80017c0 <selection+0x544>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	4a87      	ldr	r2, [pc, #540]	; (80017c0 <selection+0x544>)
 80015a2:	6013      	str	r3, [r2, #0]
			  if(value > 99) value = 0;
 80015a4:	4b86      	ldr	r3, [pc, #536]	; (80017c0 <selection+0x544>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b63      	cmp	r3, #99	; 0x63
 80015aa:	dd02      	ble.n	80015b2 <selection+0x336>
 80015ac:	4b84      	ldr	r3, [pc, #528]	; (80017c0 <selection+0x544>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
			  bufferValue(value) ;
 80015b2:	4b83      	ldr	r3, [pc, #524]	; (80017c0 <selection+0x544>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fb8e 	bl	8001cd8 <bufferValue>
		}
		// set a value of counter then decreased value of counter
		if(is_button_Pressed(2)){
 80015bc:	2002      	movs	r0, #2
 80015be:	f7fe fdc5 	bl	800014c <is_button_Pressed>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d007      	beq.n	80015d8 <selection+0x35c>
			counter = value ;
 80015c8:	4b7d      	ldr	r3, [pc, #500]	; (80017c0 <selection+0x544>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a79      	ldr	r2, [pc, #484]	; (80017b4 <selection+0x538>)
 80015ce:	6013      	str	r3, [r2, #0]
			setTimer8(1000) ;
 80015d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015d4:	f000 f940 	bl	8001858 <setTimer8>
		}
		// chuyen trang thai
		if(is_button_Pressed(0)){
 80015d8:	2000      	movs	r0, #0
 80015da:	f7fe fdb7 	bl	800014c <is_button_Pressed>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d042      	beq.n	800166a <selection+0x3ee>
			status = 3  ;
 80015e4:	4b77      	ldr	r3, [pc, #476]	; (80017c4 <selection+0x548>)
 80015e6:	2203      	movs	r2, #3
 80015e8:	601a      	str	r2, [r3, #0]
			value = 0 ;
 80015ea:	4b75      	ldr	r3, [pc, #468]	; (80017c0 <selection+0x544>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
			counter = 1 ;
 80015f0:	4b70      	ldr	r3, [pc, #448]	; (80017b4 <selection+0x538>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
			i = 0 ;
 80015f6:	4b6c      	ldr	r3, [pc, #432]	; (80017a8 <selection+0x52c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
			i1 = 0 ;
 80015fc:	4b6b      	ldr	r3, [pc, #428]	; (80017ac <selection+0x530>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
			setTimer7(500) ;
 8001602:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001606:	f000 f943 	bl	8001890 <setTimer7>
			setTimer9(500) ;
 800160a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800160e:	f000 f907 	bl	8001820 <setTimer9>
			bufferValue(value) ;
 8001612:	4b6b      	ldr	r3, [pc, #428]	; (80017c0 <selection+0x544>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fb5e 	bl	8001cd8 <bufferValue>
			bufferMode(status) ;
 800161c:	4b69      	ldr	r3, [pc, #420]	; (80017c4 <selection+0x548>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fb87 	bl	8001d34 <bufferMode>
			HAL_GPIO_WritePin(RED1, Pin_RED1, SET) ;
 8001626:	2201      	movs	r2, #1
 8001628:	2140      	movs	r1, #64	; 0x40
 800162a:	4864      	ldr	r0, [pc, #400]	; (80017bc <selection+0x540>)
 800162c:	f000 ff25 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2, Pin_RED2, SET) ;
 8001630:	2201      	movs	r2, #1
 8001632:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001636:	4861      	ldr	r0, [pc, #388]	; (80017bc <selection+0x540>)
 8001638:	f000 ff1f 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AMBER1, Pin_AMBER1, SET) ;
 800163c:	2201      	movs	r2, #1
 800163e:	2180      	movs	r1, #128	; 0x80
 8001640:	485e      	ldr	r0, [pc, #376]	; (80017bc <selection+0x540>)
 8001642:	f000 ff1a 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AMBER2, Pin_AMBER2, SET) ;
 8001646:	2201      	movs	r2, #1
 8001648:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800164c:	485b      	ldr	r0, [pc, #364]	; (80017bc <selection+0x540>)
 800164e:	f000 ff14 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1, Pin_GREEN1, RESET) ;
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001658:	4858      	ldr	r0, [pc, #352]	; (80017bc <selection+0x540>)
 800165a:	f000 ff0e 	bl	800247a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2, Pin_GREEN2, RESET) ;
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001664:	4855      	ldr	r0, [pc, #340]	; (80017bc <selection+0x540>)
 8001666:	f000 ff08 	bl	800247a <HAL_GPIO_WritePin>
		}

		if(counter <= 0 ){
 800166a:	4b52      	ldr	r3, [pc, #328]	; (80017b4 <selection+0x538>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f300 80b4 	bgt.w	80017dc <selection+0x560>
			status = 0 ;
 8001674:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <selection+0x548>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
			status_traffic_0 = INIT;
 800167a:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <selection+0x54c>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
			status_traffic_1 = INIT;
 8001680:	4b52      	ldr	r3, [pc, #328]	; (80017cc <selection+0x550>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
			bufferMode(status);
 8001686:	4b4f      	ldr	r3, [pc, #316]	; (80017c4 <selection+0x548>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fb52 	bl	8001d34 <bufferMode>
		}

			break;
 8001690:	e0a4      	b.n	80017dc <selection+0x560>
		case 3:
			// led 7SEGs
			if(timer9_flag >= 1){
 8001692:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <selection+0x528>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	dd21      	ble.n	80016de <selection+0x462>
				setTimer9(500);
 800169a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800169e:	f000 f8bf 	bl	8001820 <setTimer9>
				if(i > 1) i = 0 ;
 80016a2:	4b41      	ldr	r3, [pc, #260]	; (80017a8 <selection+0x52c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	dd02      	ble.n	80016b0 <selection+0x434>
 80016aa:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <selection+0x52c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
				update_mode(i++) ;
 80016b0:	4b3d      	ldr	r3, [pc, #244]	; (80017a8 <selection+0x52c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	493c      	ldr	r1, [pc, #240]	; (80017a8 <selection+0x52c>)
 80016b8:	600a      	str	r2, [r1, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fb80 	bl	8001dc0 <update_mode>
				if(i1 > 1) i1 = 0 ;
 80016c0:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <selection+0x530>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	dd02      	ble.n	80016ce <selection+0x452>
 80016c8:	4b38      	ldr	r3, [pc, #224]	; (80017ac <selection+0x530>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
				update_value(i1++) ;
 80016ce:	4b37      	ldr	r3, [pc, #220]	; (80017ac <selection+0x530>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	4935      	ldr	r1, [pc, #212]	; (80017ac <selection+0x530>)
 80016d6:	600a      	str	r2, [r1, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fb3d 	bl	8001d58 <update_value>
			}
			if(timer8_flag >= 1){
 80016de:	4b34      	ldr	r3, [pc, #208]	; (80017b0 <selection+0x534>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	dd0d      	ble.n	8001702 <selection+0x486>
				setTimer8(1000);
 80016e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ea:	f000 f8b5 	bl	8001858 <setTimer8>
				counter--;
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <selection+0x538>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	4a2f      	ldr	r2, [pc, #188]	; (80017b4 <selection+0x538>)
 80016f6:	6013      	str	r3, [r2, #0]
				bufferValue(counter);
 80016f8:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <selection+0x538>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 faeb 	bl	8001cd8 <bufferValue>
			}

			// toggle led REDs
			if(timer7_flag >= 1){
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <selection+0x53c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	dd0d      	ble.n	8001726 <selection+0x4aa>
				setTimer7(500);
 800170a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800170e:	f000 f8bf 	bl	8001890 <setTimer7>
				HAL_GPIO_TogglePin(GREEN1, Pin_GREEN1) ;
 8001712:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001716:	4829      	ldr	r0, [pc, #164]	; (80017bc <selection+0x540>)
 8001718:	f000 fec7 	bl	80024aa <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GREEN2, Pin_GREEN2) ;
 800171c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001720:	4826      	ldr	r0, [pc, #152]	; (80017bc <selection+0x540>)
 8001722:	f000 fec2 	bl	80024aa <HAL_GPIO_TogglePin>
			}
			// increase a value of counter
			if(is_button_Pressed(1)){
 8001726:	2001      	movs	r0, #1
 8001728:	f7fe fd10 	bl	800014c <is_button_Pressed>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d010      	beq.n	8001754 <selection+0x4d8>
				  value++;
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <selection+0x544>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	4a21      	ldr	r2, [pc, #132]	; (80017c0 <selection+0x544>)
 800173a:	6013      	str	r3, [r2, #0]
				  if(value > 99) value = 0;
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <selection+0x544>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b63      	cmp	r3, #99	; 0x63
 8001742:	dd02      	ble.n	800174a <selection+0x4ce>
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <selection+0x544>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
				  bufferValue(value) ;
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <selection+0x544>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f000 fac2 	bl	8001cd8 <bufferValue>
			}
			// set a value of counter then decreased value of counter
			if(is_button_Pressed(2)){
 8001754:	2002      	movs	r0, #2
 8001756:	f7fe fcf9 	bl	800014c <is_button_Pressed>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <selection+0x4f4>
				counter = value ;
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <selection+0x544>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <selection+0x538>)
 8001766:	6013      	str	r3, [r2, #0]
				setTimer8(1000) ;
 8001768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800176c:	f000 f874 	bl	8001858 <setTimer8>
			}
			// chuyen trang thai
			if(is_button_Pressed(0) || counter <= 0){
 8001770:	2000      	movs	r0, #0
 8001772:	f7fe fceb 	bl	800014c <is_button_Pressed>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d103      	bne.n	8001784 <selection+0x508>
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <selection+0x538>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	dc2d      	bgt.n	80017e0 <selection+0x564>
				status = 0 ;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <selection+0x548>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
				status_traffic_0 = INIT;
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <selection+0x54c>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
				status_traffic_1 = INIT;
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <selection+0x550>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
				bufferMode(status);
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <selection+0x548>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f000 faca 	bl	8001d34 <bufferMode>
			}

			break;
 80017a0:	e01e      	b.n	80017e0 <selection+0x564>
 80017a2:	bf00      	nop
 80017a4:	20000128 	.word	0x20000128
 80017a8:	20000094 	.word	0x20000094
 80017ac:	20000098 	.word	0x20000098
 80017b0:	20000120 	.word	0x20000120
 80017b4:	20000088 	.word	0x20000088
 80017b8:	20000118 	.word	0x20000118
 80017bc:	40010800 	.word	0x40010800
 80017c0:	20000080 	.word	0x20000080
 80017c4:	20000084 	.word	0x20000084
 80017c8:	2000008c 	.word	0x2000008c
 80017cc:	20000090 	.word	0x20000090

		default:
			break;
 80017d0:	bf00      	nop
 80017d2:	e006      	b.n	80017e2 <selection+0x566>
			break;
 80017d4:	bf00      	nop
 80017d6:	e004      	b.n	80017e2 <selection+0x566>
			break;
 80017d8:	bf00      	nop
 80017da:	e002      	b.n	80017e2 <selection+0x566>
			break;
 80017dc:	bf00      	nop
 80017de:	e000      	b.n	80017e2 <selection+0x566>
			break;
 80017e0:	bf00      	nop
	}
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop

080017e8 <setTimer0>:
int timer10_flag = 0;

int timer0_counter = 0;
int timer0_flag = 0;

void setTimer0(int duration){
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/TIME_CYCLE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <setTimer0+0x2c>)
 80017f4:	fb82 1203 	smull	r1, r2, r2, r3
 80017f8:	1092      	asrs	r2, r2, #2
 80017fa:	17db      	asrs	r3, r3, #31
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	4a06      	ldr	r2, [pc, #24]	; (8001818 <setTimer0+0x30>)
 8001800:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <setTimer0+0x34>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	66666667 	.word	0x66666667
 8001818:	20000134 	.word	0x20000134
 800181c:	20000138 	.word	0x20000138

08001820 <setTimer9>:
void setTimer10(int duration){
	timer10_counter = duration/TIME_CYCLE;
	timer10_flag = 0;
}
void setTimer9(int duration){
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	timer9_counter = duration/TIME_CYCLE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <setTimer9+0x2c>)
 800182c:	fb82 1203 	smull	r1, r2, r2, r3
 8001830:	1092      	asrs	r2, r2, #2
 8001832:	17db      	asrs	r3, r3, #31
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	4a06      	ldr	r2, [pc, #24]	; (8001850 <setTimer9+0x30>)
 8001838:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <setTimer9+0x34>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	66666667 	.word	0x66666667
 8001850:	20000124 	.word	0x20000124
 8001854:	20000128 	.word	0x20000128

08001858 <setTimer8>:
void setTimer8(int duration){
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/TIME_CYCLE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a08      	ldr	r2, [pc, #32]	; (8001884 <setTimer8+0x2c>)
 8001864:	fb82 1203 	smull	r1, r2, r2, r3
 8001868:	1092      	asrs	r2, r2, #2
 800186a:	17db      	asrs	r3, r3, #31
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	4a06      	ldr	r2, [pc, #24]	; (8001888 <setTimer8+0x30>)
 8001870:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <setTimer8+0x34>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	66666667 	.word	0x66666667
 8001888:	2000011c 	.word	0x2000011c
 800188c:	20000120 	.word	0x20000120

08001890 <setTimer7>:

void setTimer7(int duration){
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TIME_CYCLE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a08      	ldr	r2, [pc, #32]	; (80018bc <setTimer7+0x2c>)
 800189c:	fb82 1203 	smull	r1, r2, r2, r3
 80018a0:	1092      	asrs	r2, r2, #2
 80018a2:	17db      	asrs	r3, r3, #31
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <setTimer7+0x30>)
 80018a8:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <setTimer7+0x34>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	66666667 	.word	0x66666667
 80018c0:	20000114 	.word	0x20000114
 80018c4:	20000118 	.word	0x20000118

080018c8 <setTimer6>:
void setTimer6(int duration){
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TIME_CYCLE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <setTimer6+0x2c>)
 80018d4:	fb82 1203 	smull	r1, r2, r2, r3
 80018d8:	1092      	asrs	r2, r2, #2
 80018da:	17db      	asrs	r3, r3, #31
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <setTimer6+0x30>)
 80018e0:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <setTimer6+0x34>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	66666667 	.word	0x66666667
 80018f8:	2000010c 	.word	0x2000010c
 80018fc:	20000110 	.word	0x20000110

08001900 <setTimer5>:
void setTimer5(int duration){
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TIME_CYCLE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a08      	ldr	r2, [pc, #32]	; (800192c <setTimer5+0x2c>)
 800190c:	fb82 1203 	smull	r1, r2, r2, r3
 8001910:	1092      	asrs	r2, r2, #2
 8001912:	17db      	asrs	r3, r3, #31
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	4a06      	ldr	r2, [pc, #24]	; (8001930 <setTimer5+0x30>)
 8001918:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <setTimer5+0x34>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	66666667 	.word	0x66666667
 8001930:	20000104 	.word	0x20000104
 8001934:	20000108 	.word	0x20000108

08001938 <setTimer4>:

void setTimer4(int duration){
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIME_CYCLE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <setTimer4+0x2c>)
 8001944:	fb82 1203 	smull	r1, r2, r2, r3
 8001948:	1092      	asrs	r2, r2, #2
 800194a:	17db      	asrs	r3, r3, #31
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	4a06      	ldr	r2, [pc, #24]	; (8001968 <setTimer4+0x30>)
 8001950:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <setTimer4+0x34>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	66666667 	.word	0x66666667
 8001968:	200000fc 	.word	0x200000fc
 800196c:	20000100 	.word	0x20000100

08001970 <setTimer3>:

void setTimer3(int duration){
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIME_CYCLE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <setTimer3+0x2c>)
 800197c:	fb82 1203 	smull	r1, r2, r2, r3
 8001980:	1092      	asrs	r2, r2, #2
 8001982:	17db      	asrs	r3, r3, #31
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <setTimer3+0x30>)
 8001988:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <setTimer3+0x34>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	66666667 	.word	0x66666667
 80019a0:	200000f4 	.word	0x200000f4
 80019a4:	200000f8 	.word	0x200000f8

080019a8 <setTimer2>:

void setTimer2(int duration){
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIME_CYCLE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <setTimer2+0x2c>)
 80019b4:	fb82 1203 	smull	r1, r2, r2, r3
 80019b8:	1092      	asrs	r2, r2, #2
 80019ba:	17db      	asrs	r3, r3, #31
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <setTimer2+0x30>)
 80019c0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <setTimer2+0x34>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	66666667 	.word	0x66666667
 80019d8:	200000ec 	.word	0x200000ec
 80019dc:	200000f0 	.word	0x200000f0

080019e0 <setTimer1>:
void setTimer1(int duration){
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIME_CYCLE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <setTimer1+0x2c>)
 80019ec:	fb82 1203 	smull	r1, r2, r2, r3
 80019f0:	1092      	asrs	r2, r2, #2
 80019f2:	17db      	asrs	r3, r3, #31
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <setTimer1+0x30>)
 80019f8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <setTimer1+0x34>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	66666667 	.word	0x66666667
 8001a10:	200000e4 	.word	0x200000e4
 8001a14:	200000e8 	.word	0x200000e8

08001a18 <timerRun>:
void timerRun(){
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001a1c:	4b59      	ldr	r3, [pc, #356]	; (8001b84 <timerRun+0x16c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	dd0b      	ble.n	8001a3c <timerRun+0x24>
		timer1_counter--;
 8001a24:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <timerRun+0x16c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	4a56      	ldr	r2, [pc, #344]	; (8001b84 <timerRun+0x16c>)
 8001a2c:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 8001a2e:	4b55      	ldr	r3, [pc, #340]	; (8001b84 <timerRun+0x16c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <timerRun+0x24>
			timer1_flag = 1;
 8001a36:	4b54      	ldr	r3, [pc, #336]	; (8001b88 <timerRun+0x170>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001a3c:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <timerRun+0x174>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	dd0b      	ble.n	8001a5c <timerRun+0x44>
			timer2_counter--;
 8001a44:	4b51      	ldr	r3, [pc, #324]	; (8001b8c <timerRun+0x174>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	4a50      	ldr	r2, [pc, #320]	; (8001b8c <timerRun+0x174>)
 8001a4c:	6013      	str	r3, [r2, #0]
			if(timer2_counter == 0){
 8001a4e:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <timerRun+0x174>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <timerRun+0x44>
				timer2_flag = 1;
 8001a56:	4b4e      	ldr	r3, [pc, #312]	; (8001b90 <timerRun+0x178>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer3_counter > 0){
 8001a5c:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <timerRun+0x17c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	dd0b      	ble.n	8001a7c <timerRun+0x64>
				timer3_counter--;
 8001a64:	4b4b      	ldr	r3, [pc, #300]	; (8001b94 <timerRun+0x17c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	4a4a      	ldr	r2, [pc, #296]	; (8001b94 <timerRun+0x17c>)
 8001a6c:	6013      	str	r3, [r2, #0]
				if(timer3_counter == 0){
 8001a6e:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <timerRun+0x17c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <timerRun+0x64>
					timer3_flag = 1;
 8001a76:	4b48      	ldr	r3, [pc, #288]	; (8001b98 <timerRun+0x180>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
				}
			}

	if(timer4_counter > 0){
 8001a7c:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <timerRun+0x184>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	dd0b      	ble.n	8001a9c <timerRun+0x84>
				timer4_counter--;
 8001a84:	4b45      	ldr	r3, [pc, #276]	; (8001b9c <timerRun+0x184>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	4a44      	ldr	r2, [pc, #272]	; (8001b9c <timerRun+0x184>)
 8001a8c:	6013      	str	r3, [r2, #0]
				if(timer4_counter == 0){
 8001a8e:	4b43      	ldr	r3, [pc, #268]	; (8001b9c <timerRun+0x184>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <timerRun+0x84>
					timer4_flag = 1;
 8001a96:	4b42      	ldr	r3, [pc, #264]	; (8001ba0 <timerRun+0x188>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
				}
			}

	if(timer5_counter > 0){
 8001a9c:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <timerRun+0x18c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	dd0b      	ble.n	8001abc <timerRun+0xa4>
			timer5_counter--;
 8001aa4:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <timerRun+0x18c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	4a3e      	ldr	r2, [pc, #248]	; (8001ba4 <timerRun+0x18c>)
 8001aac:	6013      	str	r3, [r2, #0]
			if(timer5_counter == 0){
 8001aae:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <timerRun+0x18c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d102      	bne.n	8001abc <timerRun+0xa4>
				timer5_flag = 1;
 8001ab6:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <timerRun+0x190>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
			}
		}


	if(timer6_counter > 0){
 8001abc:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <timerRun+0x194>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	dd0b      	ble.n	8001adc <timerRun+0xc4>
				timer6_counter--;
 8001ac4:	4b39      	ldr	r3, [pc, #228]	; (8001bac <timerRun+0x194>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	4a38      	ldr	r2, [pc, #224]	; (8001bac <timerRun+0x194>)
 8001acc:	6013      	str	r3, [r2, #0]
				if(timer6_counter == 0){
 8001ace:	4b37      	ldr	r3, [pc, #220]	; (8001bac <timerRun+0x194>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d102      	bne.n	8001adc <timerRun+0xc4>
					timer6_flag = 1;
 8001ad6:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <timerRun+0x198>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
				}
			}

	if(timer7_counter > 0){
 8001adc:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <timerRun+0x19c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	dd0b      	ble.n	8001afc <timerRun+0xe4>
			timer7_counter--;
 8001ae4:	4b33      	ldr	r3, [pc, #204]	; (8001bb4 <timerRun+0x19c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	4a32      	ldr	r2, [pc, #200]	; (8001bb4 <timerRun+0x19c>)
 8001aec:	6013      	str	r3, [r2, #0]
			if(timer7_counter == 0){
 8001aee:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <timerRun+0x19c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d102      	bne.n	8001afc <timerRun+0xe4>
				timer7_flag = 1;
 8001af6:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <timerRun+0x1a0>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer10_counter > 0){
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <timerRun+0x1a4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	dd0b      	ble.n	8001b1c <timerRun+0x104>
			timer10_counter--;
 8001b04:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <timerRun+0x1a4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	4a2c      	ldr	r2, [pc, #176]	; (8001bbc <timerRun+0x1a4>)
 8001b0c:	6013      	str	r3, [r2, #0]
			if(timer10_counter == 0){
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <timerRun+0x1a4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d102      	bne.n	8001b1c <timerRun+0x104>
				timer10_flag = 1;
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <timerRun+0x1a8>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
			}
		}


	if(timer9_counter > 0){
 8001b1c:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <timerRun+0x1ac>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	dd0b      	ble.n	8001b3c <timerRun+0x124>
				timer9_counter--;
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <timerRun+0x1ac>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	4a26      	ldr	r2, [pc, #152]	; (8001bc4 <timerRun+0x1ac>)
 8001b2c:	6013      	str	r3, [r2, #0]
				if(timer9_counter == 0){
 8001b2e:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <timerRun+0x1ac>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d102      	bne.n	8001b3c <timerRun+0x124>
					timer9_flag = 1;
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <timerRun+0x1b0>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
				}
			}

	if(timer8_counter > 0){
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <timerRun+0x1b4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	dd0b      	ble.n	8001b5c <timerRun+0x144>
			timer8_counter--;
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <timerRun+0x1b4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	4a20      	ldr	r2, [pc, #128]	; (8001bcc <timerRun+0x1b4>)
 8001b4c:	6013      	str	r3, [r2, #0]
			if(timer8_counter == 0){
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <timerRun+0x1b4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <timerRun+0x144>
				timer8_flag = 1;
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <timerRun+0x1b8>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer0_counter > 0){
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <timerRun+0x1bc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	dd0b      	ble.n	8001b7c <timerRun+0x164>
			timer0_counter--;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <timerRun+0x1bc>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <timerRun+0x1bc>)
 8001b6c:	6013      	str	r3, [r2, #0]
			if(timer0_counter == 0){
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <timerRun+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <timerRun+0x164>
				timer0_flag = 1;
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <timerRun+0x1c0>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	200000e4 	.word	0x200000e4
 8001b88:	200000e8 	.word	0x200000e8
 8001b8c:	200000ec 	.word	0x200000ec
 8001b90:	200000f0 	.word	0x200000f0
 8001b94:	200000f4 	.word	0x200000f4
 8001b98:	200000f8 	.word	0x200000f8
 8001b9c:	200000fc 	.word	0x200000fc
 8001ba0:	20000100 	.word	0x20000100
 8001ba4:	20000104 	.word	0x20000104
 8001ba8:	20000108 	.word	0x20000108
 8001bac:	2000010c 	.word	0x2000010c
 8001bb0:	20000110 	.word	0x20000110
 8001bb4:	20000114 	.word	0x20000114
 8001bb8:	20000118 	.word	0x20000118
 8001bbc:	2000012c 	.word	0x2000012c
 8001bc0:	20000130 	.word	0x20000130
 8001bc4:	20000124 	.word	0x20000124
 8001bc8:	20000128 	.word	0x20000128
 8001bcc:	2000011c 	.word	0x2000011c
 8001bd0:	20000120 	.word	0x20000120
 8001bd4:	20000134 	.word	0x20000134
 8001bd8:	20000138 	.word	0x20000138

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_MspInit+0x40>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <HAL_MspInit+0x40>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6193      	str	r3, [r2, #24]
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_MspInit+0x40>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_MspInit+0x40>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_MspInit+0x40>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_MspInit+0x40>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40021000 	.word	0x40021000

08001c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c30:	d113      	bne.n	8001c5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_TIM_Base_MspInit+0x44>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <HAL_TIM_Base_MspInit+0x44>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_TIM_Base_MspInit+0x44>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	201c      	movs	r0, #28
 8001c50:	f000 fa49 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c54:	201c      	movs	r0, #28
 8001c56:	f000 fa62 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000

08001c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <NMI_Handler+0x4>

08001c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <HardFault_Handler+0x4>

08001c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <MemManage_Handler+0x4>

08001c7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7e:	e7fe      	b.n	8001c7e <BusFault_Handler+0x4>

08001c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <UsageFault_Handler+0x4>

08001c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cae:	f000 f927 	bl	8001f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <TIM2_IRQHandler+0x10>)
 8001cbe:	f001 f887 	bl	8002dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000009c 	.word	0x2000009c

08001ccc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <bufferValue>:
#include "update_value.h"


int buffer_value[2] = {0,0};
int buffer_mode[2] = {0,0} ;
void bufferValue(int value){
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	if(value <= 9){
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b09      	cmp	r3, #9
 8001ce4:	dc06      	bgt.n	8001cf4 <bufferValue+0x1c>
		buffer_value[0] = 0;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <bufferValue+0x54>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
		buffer_value[1] = value;
 8001cec:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <bufferValue+0x54>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6053      	str	r3, [r2, #4]
	}else{
		buffer_value[0] = value/10;
		buffer_value[1] = value%10;
	}
}
 8001cf2:	e016      	b.n	8001d22 <bufferValue+0x4a>
		buffer_value[0] = value/10;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <bufferValue+0x58>)
 8001cf8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cfc:	1092      	asrs	r2, r2, #2
 8001cfe:	17db      	asrs	r3, r3, #31
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <bufferValue+0x54>)
 8001d04:	6013      	str	r3, [r2, #0]
		buffer_value[1] = value%10;
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <bufferValue+0x58>)
 8001d0a:	fb83 2301 	smull	r2, r3, r3, r1
 8001d0e:	109a      	asrs	r2, r3, #2
 8001d10:	17cb      	asrs	r3, r1, #31
 8001d12:	1ad2      	subs	r2, r2, r3
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	1aca      	subs	r2, r1, r3
 8001d1e:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <bufferValue+0x54>)
 8001d20:	605a      	str	r2, [r3, #4]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	2000013c 	.word	0x2000013c
 8001d30:	66666667 	.word	0x66666667

08001d34 <bufferMode>:
void bufferMode(int status){
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	buffer_mode[0] = 0 ;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <bufferMode+0x20>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
	buffer_mode[1] = status + 1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3301      	adds	r3, #1
 8001d46:	4a03      	ldr	r2, [pc, #12]	; (8001d54 <bufferMode+0x20>)
 8001d48:	6053      	str	r3, [r2, #4]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	20000144 	.word	0x20000144

08001d58 <update_value>:
void update_value(int index){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
//	if(index > 1) index = 0 ;
	switch (index) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <update_value+0x16>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d010      	beq.n	8001d8e <update_value+0x36>
		case 1:
			display7SEG_1(buffer_value[1]) ;
			 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET) ;
			 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET) ;
		default:
			break;
 8001d6c:	e01e      	b.n	8001dac <update_value+0x54>
			display7SEG_1(buffer_value[0]) ;
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <update_value+0x60>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fc84 	bl	8000680 <display7SEG_1>
			 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET) ;
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2108      	movs	r1, #8
 8001d7c:	480f      	ldr	r0, [pc, #60]	; (8001dbc <update_value+0x64>)
 8001d7e:	f000 fb7c 	bl	800247a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET) ;
 8001d82:	2201      	movs	r2, #1
 8001d84:	2110      	movs	r1, #16
 8001d86:	480d      	ldr	r0, [pc, #52]	; (8001dbc <update_value+0x64>)
 8001d88:	f000 fb77 	bl	800247a <HAL_GPIO_WritePin>
			break;
 8001d8c:	e00f      	b.n	8001dae <update_value+0x56>
			display7SEG_1(buffer_value[1]) ;
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <update_value+0x60>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fc74 	bl	8000680 <display7SEG_1>
			 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET) ;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	2108      	movs	r1, #8
 8001d9c:	4807      	ldr	r0, [pc, #28]	; (8001dbc <update_value+0x64>)
 8001d9e:	f000 fb6c 	bl	800247a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET) ;
 8001da2:	2200      	movs	r2, #0
 8001da4:	2110      	movs	r1, #16
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <update_value+0x64>)
 8001da8:	f000 fb67 	bl	800247a <HAL_GPIO_WritePin>
			break;
 8001dac:	bf00      	nop
	}
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000013c 	.word	0x2000013c
 8001dbc:	40010800 	.word	0x40010800

08001dc0 <update_mode>:
void update_mode(int index){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
//	if(index > 1) index = 0 ;
	switch (index) {
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <update_mode+0x16>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d010      	beq.n	8001df6 <update_mode+0x36>
			 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET) ;
			 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET) ;
//			 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET) ;
//			 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET) ;
		default:
			break;
 8001dd4:	e01e      	b.n	8001e14 <update_mode+0x54>
			display7SEG_0(buffer_mode[0]) ;
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <update_mode+0x60>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fabe 	bl	800035c <display7SEG_0>
			 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET) ;
 8001de0:	2200      	movs	r2, #0
 8001de2:	2102      	movs	r1, #2
 8001de4:	480f      	ldr	r0, [pc, #60]	; (8001e24 <update_mode+0x64>)
 8001de6:	f000 fb48 	bl	800247a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET) ;
 8001dea:	2201      	movs	r2, #1
 8001dec:	2104      	movs	r1, #4
 8001dee:	480d      	ldr	r0, [pc, #52]	; (8001e24 <update_mode+0x64>)
 8001df0:	f000 fb43 	bl	800247a <HAL_GPIO_WritePin>
			break;
 8001df4:	e00f      	b.n	8001e16 <update_mode+0x56>
			display7SEG_0(buffer_mode[1]) ;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <update_mode+0x60>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe faae 	bl	800035c <display7SEG_0>
			 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET) ;
 8001e00:	2201      	movs	r2, #1
 8001e02:	2102      	movs	r1, #2
 8001e04:	4807      	ldr	r0, [pc, #28]	; (8001e24 <update_mode+0x64>)
 8001e06:	f000 fb38 	bl	800247a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET) ;
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2104      	movs	r1, #4
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <update_mode+0x64>)
 8001e10:	f000 fb33 	bl	800247a <HAL_GPIO_WritePin>
			break;
 8001e14:	bf00      	nop
	}

}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000144 	.word	0x20000144
 8001e24:	40010800 	.word	0x40010800

08001e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e28:	f7ff ff50 	bl	8001ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e2e:	490c      	ldr	r1, [pc, #48]	; (8001e60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e30:	4a0c      	ldr	r2, [pc, #48]	; (8001e64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e44:	4c09      	ldr	r4, [pc, #36]	; (8001e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e52:	f001 fb11 	bl	8003478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e56:	f7ff f8b7 	bl	8000fc8 <main>
  bx lr
 8001e5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e60:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001e64:	08003504 	.word	0x08003504
  ldr r2, =_sbss
 8001e68:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001e6c:	20000150 	.word	0x20000150

08001e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC1_2_IRQHandler>
	...

08001e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_Init+0x28>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <HAL_Init+0x28>)
 8001e7e:	f043 0310 	orr.w	r3, r3, #16
 8001e82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f000 f923 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8a:	200f      	movs	r0, #15
 8001e8c:	f000 f808 	bl	8001ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e90:	f7ff fea4 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40022000 	.word	0x40022000

08001ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x54>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x58>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f93b 	bl	800213a <HAL_SYSTICK_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00e      	b.n	8001eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d80a      	bhi.n	8001eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f000 f903 	bl	80020e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee0:	4a06      	ldr	r2, [pc, #24]	; (8001efc <HAL_InitTick+0x5c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000030 	.word	0x20000030
 8001ef8:	20000038 	.word	0x20000038
 8001efc:	20000034 	.word	0x20000034

08001f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_IncTick+0x1c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_IncTick+0x20>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a03      	ldr	r2, [pc, #12]	; (8001f20 <HAL_IncTick+0x20>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	20000038 	.word	0x20000038
 8001f20:	2000014c 	.word	0x2000014c

08001f24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <HAL_GetTick+0x10>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	2000014c 	.word	0x2000014c

08001f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f54:	4013      	ands	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6a:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60d3      	str	r3, [r2, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <__NVIC_GetPriorityGrouping+0x18>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	f003 0307 	and.w	r3, r3, #7
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	db0b      	blt.n	8001fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	4906      	ldr	r1, [pc, #24]	; (8001fd0 <__NVIC_EnableIRQ+0x34>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	; (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f7ff ff90 	bl	8001fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff2d 	bl	8001f38 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff42 	bl	8001f80 <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff90 	bl	8002028 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5f 	bl	8001fd4 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff35 	bl	8001f9c <__NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffa2 	bl	800208c <SysTick_Config>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002154:	b480      	push	{r7}
 8002156:	b08b      	sub	sp, #44	; 0x2c
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002166:	e161      	b.n	800242c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002168:	2201      	movs	r2, #1
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	429a      	cmp	r2, r3
 8002182:	f040 8150 	bne.w	8002426 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4a97      	ldr	r2, [pc, #604]	; (80023e8 <HAL_GPIO_Init+0x294>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d05e      	beq.n	800224e <HAL_GPIO_Init+0xfa>
 8002190:	4a95      	ldr	r2, [pc, #596]	; (80023e8 <HAL_GPIO_Init+0x294>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d875      	bhi.n	8002282 <HAL_GPIO_Init+0x12e>
 8002196:	4a95      	ldr	r2, [pc, #596]	; (80023ec <HAL_GPIO_Init+0x298>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d058      	beq.n	800224e <HAL_GPIO_Init+0xfa>
 800219c:	4a93      	ldr	r2, [pc, #588]	; (80023ec <HAL_GPIO_Init+0x298>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d86f      	bhi.n	8002282 <HAL_GPIO_Init+0x12e>
 80021a2:	4a93      	ldr	r2, [pc, #588]	; (80023f0 <HAL_GPIO_Init+0x29c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d052      	beq.n	800224e <HAL_GPIO_Init+0xfa>
 80021a8:	4a91      	ldr	r2, [pc, #580]	; (80023f0 <HAL_GPIO_Init+0x29c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d869      	bhi.n	8002282 <HAL_GPIO_Init+0x12e>
 80021ae:	4a91      	ldr	r2, [pc, #580]	; (80023f4 <HAL_GPIO_Init+0x2a0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d04c      	beq.n	800224e <HAL_GPIO_Init+0xfa>
 80021b4:	4a8f      	ldr	r2, [pc, #572]	; (80023f4 <HAL_GPIO_Init+0x2a0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d863      	bhi.n	8002282 <HAL_GPIO_Init+0x12e>
 80021ba:	4a8f      	ldr	r2, [pc, #572]	; (80023f8 <HAL_GPIO_Init+0x2a4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d046      	beq.n	800224e <HAL_GPIO_Init+0xfa>
 80021c0:	4a8d      	ldr	r2, [pc, #564]	; (80023f8 <HAL_GPIO_Init+0x2a4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d85d      	bhi.n	8002282 <HAL_GPIO_Init+0x12e>
 80021c6:	2b12      	cmp	r3, #18
 80021c8:	d82a      	bhi.n	8002220 <HAL_GPIO_Init+0xcc>
 80021ca:	2b12      	cmp	r3, #18
 80021cc:	d859      	bhi.n	8002282 <HAL_GPIO_Init+0x12e>
 80021ce:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <HAL_GPIO_Init+0x80>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	0800224f 	.word	0x0800224f
 80021d8:	08002229 	.word	0x08002229
 80021dc:	0800223b 	.word	0x0800223b
 80021e0:	0800227d 	.word	0x0800227d
 80021e4:	08002283 	.word	0x08002283
 80021e8:	08002283 	.word	0x08002283
 80021ec:	08002283 	.word	0x08002283
 80021f0:	08002283 	.word	0x08002283
 80021f4:	08002283 	.word	0x08002283
 80021f8:	08002283 	.word	0x08002283
 80021fc:	08002283 	.word	0x08002283
 8002200:	08002283 	.word	0x08002283
 8002204:	08002283 	.word	0x08002283
 8002208:	08002283 	.word	0x08002283
 800220c:	08002283 	.word	0x08002283
 8002210:	08002283 	.word	0x08002283
 8002214:	08002283 	.word	0x08002283
 8002218:	08002231 	.word	0x08002231
 800221c:	08002245 	.word	0x08002245
 8002220:	4a76      	ldr	r2, [pc, #472]	; (80023fc <HAL_GPIO_Init+0x2a8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002226:	e02c      	b.n	8002282 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	623b      	str	r3, [r7, #32]
          break;
 800222e:	e029      	b.n	8002284 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	3304      	adds	r3, #4
 8002236:	623b      	str	r3, [r7, #32]
          break;
 8002238:	e024      	b.n	8002284 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	3308      	adds	r3, #8
 8002240:	623b      	str	r3, [r7, #32]
          break;
 8002242:	e01f      	b.n	8002284 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	330c      	adds	r3, #12
 800224a:	623b      	str	r3, [r7, #32]
          break;
 800224c:	e01a      	b.n	8002284 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002256:	2304      	movs	r3, #4
 8002258:	623b      	str	r3, [r7, #32]
          break;
 800225a:	e013      	b.n	8002284 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d105      	bne.n	8002270 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002264:	2308      	movs	r3, #8
 8002266:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	611a      	str	r2, [r3, #16]
          break;
 800226e:	e009      	b.n	8002284 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002270:	2308      	movs	r3, #8
 8002272:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	615a      	str	r2, [r3, #20]
          break;
 800227a:	e003      	b.n	8002284 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800227c:	2300      	movs	r3, #0
 800227e:	623b      	str	r3, [r7, #32]
          break;
 8002280:	e000      	b.n	8002284 <HAL_GPIO_Init+0x130>
          break;
 8002282:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2bff      	cmp	r3, #255	; 0xff
 8002288:	d801      	bhi.n	800228e <HAL_GPIO_Init+0x13a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	e001      	b.n	8002292 <HAL_GPIO_Init+0x13e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3304      	adds	r3, #4
 8002292:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2bff      	cmp	r3, #255	; 0xff
 8002298:	d802      	bhi.n	80022a0 <HAL_GPIO_Init+0x14c>
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	e002      	b.n	80022a6 <HAL_GPIO_Init+0x152>
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	3b08      	subs	r3, #8
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	210f      	movs	r1, #15
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	401a      	ands	r2, r3
 80022b8:	6a39      	ldr	r1, [r7, #32]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	431a      	orrs	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 80a9 	beq.w	8002426 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022d4:	4b4a      	ldr	r3, [pc, #296]	; (8002400 <HAL_GPIO_Init+0x2ac>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	4a49      	ldr	r2, [pc, #292]	; (8002400 <HAL_GPIO_Init+0x2ac>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6193      	str	r3, [r2, #24]
 80022e0:	4b47      	ldr	r3, [pc, #284]	; (8002400 <HAL_GPIO_Init+0x2ac>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022ec:	4a45      	ldr	r2, [pc, #276]	; (8002404 <HAL_GPIO_Init+0x2b0>)
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	220f      	movs	r2, #15
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4013      	ands	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a3d      	ldr	r2, [pc, #244]	; (8002408 <HAL_GPIO_Init+0x2b4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00d      	beq.n	8002334 <HAL_GPIO_Init+0x1e0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a3c      	ldr	r2, [pc, #240]	; (800240c <HAL_GPIO_Init+0x2b8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d007      	beq.n	8002330 <HAL_GPIO_Init+0x1dc>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a3b      	ldr	r2, [pc, #236]	; (8002410 <HAL_GPIO_Init+0x2bc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d101      	bne.n	800232c <HAL_GPIO_Init+0x1d8>
 8002328:	2302      	movs	r3, #2
 800232a:	e004      	b.n	8002336 <HAL_GPIO_Init+0x1e2>
 800232c:	2303      	movs	r3, #3
 800232e:	e002      	b.n	8002336 <HAL_GPIO_Init+0x1e2>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <HAL_GPIO_Init+0x1e2>
 8002334:	2300      	movs	r3, #0
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	f002 0203 	and.w	r2, r2, #3
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	4093      	lsls	r3, r2
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002346:	492f      	ldr	r1, [pc, #188]	; (8002404 <HAL_GPIO_Init+0x2b0>)
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	3302      	adds	r3, #2
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002360:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <HAL_GPIO_Init+0x2c0>)
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	492b      	ldr	r1, [pc, #172]	; (8002414 <HAL_GPIO_Init+0x2c0>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800236e:	4b29      	ldr	r3, [pc, #164]	; (8002414 <HAL_GPIO_Init+0x2c0>)
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	43db      	mvns	r3, r3
 8002376:	4927      	ldr	r1, [pc, #156]	; (8002414 <HAL_GPIO_Init+0x2c0>)
 8002378:	4013      	ands	r3, r2
 800237a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d006      	beq.n	8002396 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002388:	4b22      	ldr	r3, [pc, #136]	; (8002414 <HAL_GPIO_Init+0x2c0>)
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	4921      	ldr	r1, [pc, #132]	; (8002414 <HAL_GPIO_Init+0x2c0>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002396:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <HAL_GPIO_Init+0x2c0>)
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	43db      	mvns	r3, r3
 800239e:	491d      	ldr	r1, [pc, #116]	; (8002414 <HAL_GPIO_Init+0x2c0>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d006      	beq.n	80023be <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <HAL_GPIO_Init+0x2c0>)
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4917      	ldr	r1, [pc, #92]	; (8002414 <HAL_GPIO_Init+0x2c0>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_GPIO_Init+0x2c0>)
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	4913      	ldr	r1, [pc, #76]	; (8002414 <HAL_GPIO_Init+0x2c0>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01f      	beq.n	8002418 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <HAL_GPIO_Init+0x2c0>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	490d      	ldr	r1, [pc, #52]	; (8002414 <HAL_GPIO_Init+0x2c0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
 80023e4:	e01f      	b.n	8002426 <HAL_GPIO_Init+0x2d2>
 80023e6:	bf00      	nop
 80023e8:	10320000 	.word	0x10320000
 80023ec:	10310000 	.word	0x10310000
 80023f0:	10220000 	.word	0x10220000
 80023f4:	10210000 	.word	0x10210000
 80023f8:	10120000 	.word	0x10120000
 80023fc:	10110000 	.word	0x10110000
 8002400:	40021000 	.word	0x40021000
 8002404:	40010000 	.word	0x40010000
 8002408:	40010800 	.word	0x40010800
 800240c:	40010c00 	.word	0x40010c00
 8002410:	40011000 	.word	0x40011000
 8002414:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_GPIO_Init+0x2f4>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	43db      	mvns	r3, r3
 8002420:	4909      	ldr	r1, [pc, #36]	; (8002448 <HAL_GPIO_Init+0x2f4>)
 8002422:	4013      	ands	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	3301      	adds	r3, #1
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	fa22 f303 	lsr.w	r3, r2, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	f47f ae96 	bne.w	8002168 <HAL_GPIO_Init+0x14>
  }
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	372c      	adds	r7, #44	; 0x2c
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	40010400 	.word	0x40010400

0800244c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
 8002468:	e001      	b.n	800246e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	807b      	strh	r3, [r7, #2]
 8002486:	4613      	mov	r3, r2
 8002488:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800248a:	787b      	ldrb	r3, [r7, #1]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002490:	887a      	ldrh	r2, [r7, #2]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002496:	e003      	b.n	80024a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	041a      	lsls	r2, r3, #16
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	611a      	str	r2, [r3, #16]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	460b      	mov	r3, r1
 80024b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024bc:	887a      	ldrh	r2, [r7, #2]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4013      	ands	r3, r2
 80024c2:	041a      	lsls	r2, r3, #16
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	887b      	ldrh	r3, [r7, #2]
 80024ca:	400b      	ands	r3, r1
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	611a      	str	r2, [r3, #16]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e272      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8087 	beq.w	800260a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024fc:	4b92      	ldr	r3, [pc, #584]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b04      	cmp	r3, #4
 8002506:	d00c      	beq.n	8002522 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002508:	4b8f      	ldr	r3, [pc, #572]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d112      	bne.n	800253a <HAL_RCC_OscConfig+0x5e>
 8002514:	4b8c      	ldr	r3, [pc, #560]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002520:	d10b      	bne.n	800253a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002522:	4b89      	ldr	r3, [pc, #548]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d06c      	beq.n	8002608 <HAL_RCC_OscConfig+0x12c>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d168      	bne.n	8002608 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e24c      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x76>
 8002544:	4b80      	ldr	r3, [pc, #512]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a7f      	ldr	r2, [pc, #508]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e02e      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x98>
 800255a:	4b7b      	ldr	r3, [pc, #492]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7a      	ldr	r2, [pc, #488]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b78      	ldr	r3, [pc, #480]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a77      	ldr	r2, [pc, #476]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800256c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e01d      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0xbc>
 800257e:	4b72      	ldr	r3, [pc, #456]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a71      	ldr	r2, [pc, #452]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b6f      	ldr	r3, [pc, #444]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6e      	ldr	r2, [pc, #440]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002598:	4b6b      	ldr	r3, [pc, #428]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a6a      	ldr	r2, [pc, #424]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b68      	ldr	r3, [pc, #416]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a67      	ldr	r2, [pc, #412]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fcb4 	bl	8001f24 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7ff fcb0 	bl	8001f24 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e200      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b5d      	ldr	r3, [pc, #372]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe4>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7ff fca0 	bl	8001f24 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7ff fc9c 	bl	8001f24 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1ec      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x10c>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d063      	beq.n	80026de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002616:	4b4c      	ldr	r3, [pc, #304]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002622:	4b49      	ldr	r3, [pc, #292]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11c      	bne.n	8002668 <HAL_RCC_OscConfig+0x18c>
 800262e:	4b46      	ldr	r3, [pc, #280]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d116      	bne.n	8002668 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	4b43      	ldr	r3, [pc, #268]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x176>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1c0      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4939      	ldr	r1, [pc, #228]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	e03a      	b.n	80026de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7ff fc55 	bl	8001f24 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267e:	f7ff fc51 	bl	8001f24 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e1a1      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4927      	ldr	r1, [pc, #156]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
 80026b0:	e015      	b.n	80026de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff fc34 	bl	8001f24 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c0:	f7ff fc30 	bl	8001f24 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e180      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d03a      	beq.n	8002760 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d019      	beq.n	8002726 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b17      	ldr	r3, [pc, #92]	; (8002750 <HAL_RCC_OscConfig+0x274>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f8:	f7ff fc14 	bl	8001f24 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002700:	f7ff fc10 	bl	8001f24 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e160      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800271e:	2001      	movs	r0, #1
 8002720:	f000 fa9c 	bl	8002c5c <RCC_Delay>
 8002724:	e01c      	b.n	8002760 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_RCC_OscConfig+0x274>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272c:	f7ff fbfa 	bl	8001f24 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002732:	e00f      	b.n	8002754 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002734:	f7ff fbf6 	bl	8001f24 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d908      	bls.n	8002754 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e146      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	42420000 	.word	0x42420000
 8002750:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	4b92      	ldr	r3, [pc, #584]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e9      	bne.n	8002734 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80a6 	beq.w	80028ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002772:	4b8b      	ldr	r3, [pc, #556]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10d      	bne.n	800279a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	4b88      	ldr	r3, [pc, #544]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a87      	ldr	r2, [pc, #540]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	61d3      	str	r3, [r2, #28]
 800278a:	4b85      	ldr	r3, [pc, #532]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <HAL_RCC_OscConfig+0x4c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d118      	bne.n	80027d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a6:	4b7f      	ldr	r3, [pc, #508]	; (80029a4 <HAL_RCC_OscConfig+0x4c8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a7e      	ldr	r2, [pc, #504]	; (80029a4 <HAL_RCC_OscConfig+0x4c8>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b2:	f7ff fbb7 	bl	8001f24 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ba:	f7ff fbb3 	bl	8001f24 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b64      	cmp	r3, #100	; 0x64
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e103      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	4b75      	ldr	r3, [pc, #468]	; (80029a4 <HAL_RCC_OscConfig+0x4c8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x312>
 80027e0:	4b6f      	ldr	r3, [pc, #444]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a6e      	ldr	r2, [pc, #440]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6213      	str	r3, [r2, #32]
 80027ec:	e02d      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x334>
 80027f6:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4a69      	ldr	r2, [pc, #420]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6213      	str	r3, [r2, #32]
 8002802:	4b67      	ldr	r3, [pc, #412]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a66      	ldr	r2, [pc, #408]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	6213      	str	r3, [r2, #32]
 800280e:	e01c      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b05      	cmp	r3, #5
 8002816:	d10c      	bne.n	8002832 <HAL_RCC_OscConfig+0x356>
 8002818:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4a60      	ldr	r2, [pc, #384]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	6213      	str	r3, [r2, #32]
 8002824:	4b5e      	ldr	r3, [pc, #376]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4a5d      	ldr	r2, [pc, #372]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6213      	str	r3, [r2, #32]
 8002830:	e00b      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 8002832:	4b5b      	ldr	r3, [pc, #364]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a5a      	ldr	r2, [pc, #360]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6213      	str	r3, [r2, #32]
 800283e:	4b58      	ldr	r3, [pc, #352]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a57      	ldr	r2, [pc, #348]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d015      	beq.n	800287e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002852:	f7ff fb67 	bl	8001f24 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7ff fb63 	bl	8001f24 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f241 3288 	movw	r2, #5000	; 0x1388
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0b1      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ee      	beq.n	800285a <HAL_RCC_OscConfig+0x37e>
 800287c:	e014      	b.n	80028a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7ff fb51 	bl	8001f24 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7ff fb4d 	bl	8001f24 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e09b      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289c:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ee      	bne.n	8002886 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d105      	bne.n	80028ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ae:	4b3c      	ldr	r3, [pc, #240]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4a3b      	ldr	r2, [pc, #236]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8087 	beq.w	80029d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c4:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d061      	beq.n	8002994 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d146      	bne.n	8002966 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d8:	4b33      	ldr	r3, [pc, #204]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7ff fb21 	bl	8001f24 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7ff fb1d 	bl	8001f24 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e06d      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f8:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d108      	bne.n	8002920 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800290e:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4921      	ldr	r1, [pc, #132]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002920:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a19      	ldr	r1, [r3, #32]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	430b      	orrs	r3, r1
 8002932:	491b      	ldr	r1, [pc, #108]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7ff faf1 	bl	8001f24 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002946:	f7ff faed 	bl	8001f24 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e03d      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x46a>
 8002964:	e035      	b.n	80029d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7ff fada 	bl	8001f24 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7ff fad6 	bl	8001f24 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e026      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x498>
 8002992:	e01e      	b.n	80029d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d107      	bne.n	80029ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e019      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40007000 	.word	0x40007000
 80029a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_OscConfig+0x500>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000

080029e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0d0      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d910      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b67      	ldr	r3, [pc, #412]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 0207 	bic.w	r2, r3, #7
 8002a0a:	4965      	ldr	r1, [pc, #404]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b63      	ldr	r3, [pc, #396]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0b8      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d020      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a3c:	4b59      	ldr	r3, [pc, #356]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a58      	ldr	r2, [pc, #352]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a54:	4b53      	ldr	r3, [pc, #332]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a52      	ldr	r2, [pc, #328]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a60:	4b50      	ldr	r3, [pc, #320]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	494d      	ldr	r1, [pc, #308]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d040      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d115      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e07f      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9e:	4b41      	ldr	r3, [pc, #260]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e073      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aae:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e06b      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002abe:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4936      	ldr	r1, [pc, #216]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad0:	f7ff fa28 	bl	8001f24 <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7ff fa24 	bl	8001f24 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e053      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	4b2d      	ldr	r3, [pc, #180]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 020c 	and.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1eb      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b00:	4b27      	ldr	r3, [pc, #156]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d210      	bcs.n	8002b30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 0207 	bic.w	r2, r3, #7
 8002b16:	4922      	ldr	r1, [pc, #136]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e032      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4916      	ldr	r1, [pc, #88]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	490e      	ldr	r1, [pc, #56]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b6e:	f000 f821 	bl	8002bb4 <HAL_RCC_GetSysClockFreq>
 8002b72:	4602      	mov	r2, r0
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	490a      	ldr	r1, [pc, #40]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b80:	5ccb      	ldrb	r3, [r1, r3]
 8002b82:	fa22 f303 	lsr.w	r3, r2, r3
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <HAL_RCC_ClockConfig+0x1cc>)
 8002b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_RCC_ClockConfig+0x1d0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff f986 	bl	8001ea0 <HAL_InitTick>

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40022000 	.word	0x40022000
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	080034d8 	.word	0x080034d8
 8002bac:	20000030 	.word	0x20000030
 8002bb0:	20000034 	.word	0x20000034

08002bb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d002      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x30>
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0x36>
 8002be2:	e027      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002be4:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002be6:	613b      	str	r3, [r7, #16]
      break;
 8002be8:	e027      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	0c9b      	lsrs	r3, r3, #18
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	4a17      	ldr	r2, [pc, #92]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bf4:	5cd3      	ldrb	r3, [r2, r3]
 8002bf6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d010      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	0c5b      	lsrs	r3, r3, #17
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c16:	fb03 f202 	mul.w	r2, r3, r2
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e004      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a0c      	ldr	r2, [pc, #48]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	613b      	str	r3, [r7, #16]
      break;
 8002c32:	e002      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c36:	613b      	str	r3, [r7, #16]
      break;
 8002c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3a:	693b      	ldr	r3, [r7, #16]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	007a1200 	.word	0x007a1200
 8002c50:	080034e8 	.word	0x080034e8
 8002c54:	080034f8 	.word	0x080034f8
 8002c58:	003d0900 	.word	0x003d0900

08002c5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <RCC_Delay+0x34>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <RCC_Delay+0x38>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0a5b      	lsrs	r3, r3, #9
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c78:	bf00      	nop
  }
  while (Delay --);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1e5a      	subs	r2, r3, #1
 8002c7e:	60fa      	str	r2, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f9      	bne.n	8002c78 <RCC_Delay+0x1c>
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	20000030 	.word	0x20000030
 8002c94:	10624dd3 	.word	0x10624dd3

08002c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e041      	b.n	8002d2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe ffae 	bl	8001c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f000 fa6e 	bl	80031b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d001      	beq.n	8002d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e035      	b.n	8002dbc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <HAL_TIM_Base_Start_IT+0x90>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d009      	beq.n	8002d86 <HAL_TIM_Base_Start_IT+0x4e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7a:	d004      	beq.n	8002d86 <HAL_TIM_Base_Start_IT+0x4e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <HAL_TIM_Base_Start_IT+0x94>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d111      	bne.n	8002daa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b06      	cmp	r3, #6
 8002d96:	d010      	beq.n	8002dba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da8:	e007      	b.n	8002dba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40000400 	.word	0x40000400

08002dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d122      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d11b      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0202 	mvn.w	r2, #2
 8002dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f9b4 	bl	8003180 <HAL_TIM_IC_CaptureCallback>
 8002e18:	e005      	b.n	8002e26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f9a7 	bl	800316e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f9b6 	bl	8003192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d122      	bne.n	8002e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d11b      	bne.n	8002e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0204 	mvn.w	r2, #4
 8002e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f98a 	bl	8003180 <HAL_TIM_IC_CaptureCallback>
 8002e6c:	e005      	b.n	8002e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f97d 	bl	800316e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f98c 	bl	8003192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d122      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d11b      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0208 	mvn.w	r2, #8
 8002ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f960 	bl	8003180 <HAL_TIM_IC_CaptureCallback>
 8002ec0:	e005      	b.n	8002ece <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f953 	bl	800316e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f962 	bl	8003192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d122      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d11b      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0210 	mvn.w	r2, #16
 8002ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2208      	movs	r2, #8
 8002efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f936 	bl	8003180 <HAL_TIM_IC_CaptureCallback>
 8002f14:	e005      	b.n	8002f22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f929 	bl	800316e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f938 	bl	8003192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10e      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0201 	mvn.w	r2, #1
 8002f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe f97a 	bl	8001248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5e:	2b80      	cmp	r3, #128	; 0x80
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6c:	2b80      	cmp	r3, #128	; 0x80
 8002f6e:	d107      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fa6b 	bl	8003456 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b40      	cmp	r3, #64	; 0x40
 8002f8c:	d10e      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f8fc 	bl	80031a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0220 	mvn.w	r2, #32
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fa36 	bl	8003444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_TIM_ConfigClockSource+0x1c>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e0b4      	b.n	8003166 <HAL_TIM_ConfigClockSource+0x186>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800301a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003022:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003034:	d03e      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303a:	f200 8087 	bhi.w	800314c <HAL_TIM_ConfigClockSource+0x16c>
 800303e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003042:	f000 8086 	beq.w	8003152 <HAL_TIM_ConfigClockSource+0x172>
 8003046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304a:	d87f      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
 800304c:	2b70      	cmp	r3, #112	; 0x70
 800304e:	d01a      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0xa6>
 8003050:	2b70      	cmp	r3, #112	; 0x70
 8003052:	d87b      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
 8003054:	2b60      	cmp	r3, #96	; 0x60
 8003056:	d050      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x11a>
 8003058:	2b60      	cmp	r3, #96	; 0x60
 800305a:	d877      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
 800305c:	2b50      	cmp	r3, #80	; 0x50
 800305e:	d03c      	beq.n	80030da <HAL_TIM_ConfigClockSource+0xfa>
 8003060:	2b50      	cmp	r3, #80	; 0x50
 8003062:	d873      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d058      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x13a>
 8003068:	2b40      	cmp	r3, #64	; 0x40
 800306a:	d86f      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
 800306c:	2b30      	cmp	r3, #48	; 0x30
 800306e:	d064      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x15a>
 8003070:	2b30      	cmp	r3, #48	; 0x30
 8003072:	d86b      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
 8003074:	2b20      	cmp	r3, #32
 8003076:	d060      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x15a>
 8003078:	2b20      	cmp	r3, #32
 800307a:	d867      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d05c      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x15a>
 8003080:	2b10      	cmp	r3, #16
 8003082:	d05a      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x15a>
 8003084:	e062      	b.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003096:	f000 f95e 	bl	8003356 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	609a      	str	r2, [r3, #8]
      break;
 80030b2:	e04f      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030c4:	f000 f947 	bl	8003356 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d6:	609a      	str	r2, [r3, #8]
      break;
 80030d8:	e03c      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e6:	461a      	mov	r2, r3
 80030e8:	f000 f8be 	bl	8003268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2150      	movs	r1, #80	; 0x50
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f915 	bl	8003322 <TIM_ITRx_SetConfig>
      break;
 80030f8:	e02c      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003106:	461a      	mov	r2, r3
 8003108:	f000 f8dc 	bl	80032c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2160      	movs	r1, #96	; 0x60
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f905 	bl	8003322 <TIM_ITRx_SetConfig>
      break;
 8003118:	e01c      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003126:	461a      	mov	r2, r3
 8003128:	f000 f89e 	bl	8003268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2140      	movs	r1, #64	; 0x40
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f8f5 	bl	8003322 <TIM_ITRx_SetConfig>
      break;
 8003138:	e00c      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f000 f8ec 	bl	8003322 <TIM_ITRx_SetConfig>
      break;
 800314a:	e003      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
      break;
 8003150:	e000      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
	...

080031b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a25      	ldr	r2, [pc, #148]	; (8003260 <TIM_Base_SetConfig+0xa8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d007      	beq.n	80031e0 <TIM_Base_SetConfig+0x28>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d6:	d003      	beq.n	80031e0 <TIM_Base_SetConfig+0x28>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a22      	ldr	r2, [pc, #136]	; (8003264 <TIM_Base_SetConfig+0xac>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d108      	bne.n	80031f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a1a      	ldr	r2, [pc, #104]	; (8003260 <TIM_Base_SetConfig+0xa8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <TIM_Base_SetConfig+0x52>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003200:	d003      	beq.n	800320a <TIM_Base_SetConfig+0x52>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a17      	ldr	r2, [pc, #92]	; (8003264 <TIM_Base_SetConfig+0xac>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d108      	bne.n	800321c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a07      	ldr	r2, [pc, #28]	; (8003260 <TIM_Base_SetConfig+0xa8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d103      	bne.n	8003250 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	615a      	str	r2, [r3, #20]
}
 8003256:	bf00      	nop
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	40012c00 	.word	0x40012c00
 8003264:	40000400 	.word	0x40000400

08003268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	f023 0201 	bic.w	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f023 030a 	bic.w	r3, r3, #10
 80032a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	621a      	str	r2, [r3, #32]
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f023 0210 	bic.w	r2, r3, #16
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	031b      	lsls	r3, r3, #12
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003300:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	621a      	str	r2, [r3, #32]
}
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	f043 0307 	orr.w	r3, r3, #7
 8003344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	609a      	str	r2, [r3, #8]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003356:	b480      	push	{r7}
 8003358:	b087      	sub	sp, #28
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003370:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	021a      	lsls	r2, r3, #8
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	431a      	orrs	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4313      	orrs	r3, r2
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	609a      	str	r2, [r3, #8]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e041      	b.n	8003430 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a14      	ldr	r2, [pc, #80]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d009      	beq.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f8:	d004      	beq.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a10      	ldr	r2, [pc, #64]	; (8003440 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10c      	bne.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800340a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	4313      	orrs	r3, r2
 8003414:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40000400 	.word	0x40000400

08003444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <memset>:
 8003468:	4603      	mov	r3, r0
 800346a:	4402      	add	r2, r0
 800346c:	4293      	cmp	r3, r2
 800346e:	d100      	bne.n	8003472 <memset+0xa>
 8003470:	4770      	bx	lr
 8003472:	f803 1b01 	strb.w	r1, [r3], #1
 8003476:	e7f9      	b.n	800346c <memset+0x4>

08003478 <__libc_init_array>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	2600      	movs	r6, #0
 800347c:	4d0c      	ldr	r5, [pc, #48]	; (80034b0 <__libc_init_array+0x38>)
 800347e:	4c0d      	ldr	r4, [pc, #52]	; (80034b4 <__libc_init_array+0x3c>)
 8003480:	1b64      	subs	r4, r4, r5
 8003482:	10a4      	asrs	r4, r4, #2
 8003484:	42a6      	cmp	r6, r4
 8003486:	d109      	bne.n	800349c <__libc_init_array+0x24>
 8003488:	f000 f81a 	bl	80034c0 <_init>
 800348c:	2600      	movs	r6, #0
 800348e:	4d0a      	ldr	r5, [pc, #40]	; (80034b8 <__libc_init_array+0x40>)
 8003490:	4c0a      	ldr	r4, [pc, #40]	; (80034bc <__libc_init_array+0x44>)
 8003492:	1b64      	subs	r4, r4, r5
 8003494:	10a4      	asrs	r4, r4, #2
 8003496:	42a6      	cmp	r6, r4
 8003498:	d105      	bne.n	80034a6 <__libc_init_array+0x2e>
 800349a:	bd70      	pop	{r4, r5, r6, pc}
 800349c:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a0:	4798      	blx	r3
 80034a2:	3601      	adds	r6, #1
 80034a4:	e7ee      	b.n	8003484 <__libc_init_array+0xc>
 80034a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034aa:	4798      	blx	r3
 80034ac:	3601      	adds	r6, #1
 80034ae:	e7f2      	b.n	8003496 <__libc_init_array+0x1e>
 80034b0:	080034fc 	.word	0x080034fc
 80034b4:	080034fc 	.word	0x080034fc
 80034b8:	080034fc 	.word	0x080034fc
 80034bc:	08003500 	.word	0x08003500

080034c0 <_init>:
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	bf00      	nop
 80034c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c6:	bc08      	pop	{r3}
 80034c8:	469e      	mov	lr, r3
 80034ca:	4770      	bx	lr

080034cc <_fini>:
 80034cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ce:	bf00      	nop
 80034d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d2:	bc08      	pop	{r3}
 80034d4:	469e      	mov	lr, r3
 80034d6:	4770      	bx	lr
